// 2025-06-08 19:03:02
#event properties (no comments/etc. here are saved)
parent_index = -1;
uses_physics = false;

#event create
currentStep = 0;
personIndex = 0;
totalTime = 0;
event_user(0);
start = false;
blackAlpha = 0;
view_xview[1] = 0;
view_yview[1] = room_height;
alarm[11] = 1;
with(player)
{
    frozen = true;
    image_alpha = 0;
}





currentSteps = 0;
star1 = 0;
star2 = 0;
star3 = 0;



recordX[0, 0] = 0;
recordY[0, 0] = 0;
recordSpr[0, 0] = 0;
recordSprInd[0, 0] = 0;
recordXScale[0, 0] = 0;

ind = 0;

#event alarm0
start = true;
player.frozen = false;

#event alarm1
if(blackAlpha < 1)
{
    blackAlpha += 0.01;
    alarm[1] = 1;
}
else
{
    personIndex += 1;
    event_user(0);
    currentStep = 0;
    if(!player_is_alive())
    {
        instance_create(startX, startY, player);
    }
    player.x = startX;
    player.y = startY;
    player.frozen = true;
    with(obj_jkButtonPrototype)
    {
        pressed = false;
    }
    with(obj_jkButtonTLPrototype)
    {
        time = 0;
    }
    with(obj_jkPlatformPrototype)
    {
        x = startX;
        y = startY;
        hspeed = hspd;
        vspeed = vspd;
    }
    with(obj_followingMonster)
    {
        x = startX;
        y = startY;
    }
    obj_jkDoor.alarm[0] = 1;
    alarm[2] = 10;
}

#event alarm2
if(blackAlpha > 0)
{
    blackAlpha -= 0.02;
    alarm[2] = 1;
}
else
{
    start = true;
    player.frozen = false;
    shadow = instance_create(startX, startY, obj_jkShadow);
    shadow.ind = personIndex - 1;
    with(obj_jkShadow)
    {
        visible = true;
    }
}

#event alarm11
obj_jkDoor.alarm[0] = 1;

#event step
if(room == ExtraJKBonus)
    exit;
if(start)
{
    player.frozen = false;
    recordX[personIndex, currentStep] = player.x;
    recordY[personIndex, currentStep] = player.y;
    recordSpr[personIndex, currentStep] = player.sprite_index;
    recordSprInd[personIndex, currentStep] = player.image_index;
    recordXScale[personIndex, currentStep] = player.image_xscale;
    currentStep += 1;
    recordLength[personIndex] = currentStep;
}
else
{
    with(player)
    {
        gravity = 0;
        frozen = true;
        hspeed = 0;
        vspeed = 0;
    }
}
if(currentStep == totalTime * 50)
{
    start = false;
    if(personIndex < 6)
    {
        alarm[1] = 1;
    }
    else
    {
        with(player)
        {
            killPlayer();
        }
    }
}
#section
if(room == ExtraJKBonus)
    exit;
if(personIndex < 6)
{
    if(!player_is_alive() && start)
    {
        start = false;
        alarm[1] = 1;
    }
    with(GAMEOVER)
    {
        instance_destroy();
    }
}
#section
if(room == ExtraJKBonus)
    exit;
if(obj_jkExitDoor.transport)
    exit;
if(keyboard_check_released(vk_backspace))
{
    start = false;
    //transition_kind = 21;
    //transition_steps = 100;
    room_goto(ExtraJKPortal);
    player.x = global.JKBackX;
    player.y = global.JKBackY;
}

if(keyboard_check_direct(global.downbutton))
{
    if(player_is_alive())
    {
        player.sprite_index = sprPlayerIdle;
        player.vspeed = 0;
        player.x = startX;
        player.y = startY;
    }
}

if(keyboard_check_direct(global.restartbutton) && !keyboard_check_direct(vk_control))
{
    if(!player_is_alive())
    {
       instance_create(startX, startY, player);
    }
    player.x = startX;
    player.y = startY;
    player.vspeed = 0;
    recordLength[personIndex] = 0;
    currentStep = 0;
    blackAlpha = 0;
    alarm[1] = 0;
    alarm[0] = 1;
    with(obj_jkButtonPrototype)
    {
      pressed = false;
    }
    with(obj_jkButtonTLPrototype)
    {
        time = 0;
    }
    with(obj_jkPlatformPrototype)
    {
        x = startX;
        y = startY;
        hspeed = hspd;
        vspeed = vspd;
    }
    with(obj_followingMonster)
    {
        x = startX;
        y = startY;
    }
    with(GAMEOVER)
    {
        instance_destroy();
    }
}

#event other_user0
recordX[personIndex, totalTime * 50 + 1] = 0;
recordY[personIndex, totalTime * 50 + 1] = 0;
recordSpr[personIndex, totalTime * 50 + 1] = 0;
recordSprInd[personIndex, totalTime * 50 + 1] = 0;
recordXScale[personIndex, totalTime * 50 + 1] = 0;

#event draw
/*if(room == ExtraJKBonus)
    exit;
//draw_set_color(c_silver);
//draw_rectangle(0,view_yview[1],800,view_yview[1] + 64, false);

draw_set_color(c_black);
draw_set_font(fontBasicInfo);
draw_set_halign(fa_left);
draw_set_valign(fa_middle);
draw_set_alpha(1);
draw_text(16, view_yview[1] + 32, "Lives:");
draw_set_font(fontBasicInfoMini);
draw_text(240, view_yview[1] + 21, "Down - Back to Start Position");
draw_text(240, view_yview[1] + 43, "Backspace - Return Portal Room");
draw_text(472, view_yview[1] + 21, "R - Retry Current Life");
draw_text(472, view_yview[1] + 43, "Ctrl + R - Load Game");


for(i = 0; i <= personIndex; i+=1)
{
    draw_sprite_ext(sprPlayerIdle, 0, view_xview[1] + 80 + 24 * i, view_yview[1] + 34, 0.6,0.6,0,c_white,1);
}

for(i = personIndex + 1; i < 7; i+=1)
{
    draw_sprite_ext(sprPlayerIdle, 0, view_xview[1] + 80 + 24 * i, view_yview[1] + 34, 0.6, 0.6, 0, c_black, 0.6);
}
draw_set_color(c_green);
draw_line_width(view_xview[1] + 66, view_yview[1] + 45, view_xview[1] + 66 + 24 * star3, view_yview[1] + 45, 3);
draw_set_color(c_yellow);
draw_line_width(view_xview[1] + 66 + 24 * star3, view_yview[1] + 45, view_xview[1] + 66 + 24 * star2, view_yview[1] + 45, 3);
draw_set_color(c_red);
draw_line_width(view_xview[1] + 66 + 24 * star2, view_yview[1] + 45, view_xview[1] + 66 + 24 * star1, view_yview[1] + 45, 3);


draw_set_font(font24);
draw_set_halign(fa_right);
draw_set_valign(fa_middle);
draw_set_color(c_black);
draw_set_alpha(1);
draw_text(768, view_yview[1] + 32, string_format((round((totalTime * 50 - currentStep) / 5) / 10), 3, 1));

draw_set_circle_precision(64);
draw_set_color(make_color_rgb(47,47,47));
draw_circle(672, view_yview[1] + 32, 28, false);
draw_set_color(c_green);
drawArc(totalTime * 6,0.5, 27, 90, 672, view_yview[1] + 32, true);
draw_set_color(c_orange);
drawArc(currentStep/50 * 6,0.5, 27, 90, 672, view_yview[1] + 32, true);

draw_set_alpha(blackAlpha);
draw_set_color(c_black);
draw_rectangle(view_xview[0], view_yview[0], view_xview[0] + 800, view_yview[0] + 544, false);
draw_rectangle(view_xview[1], view_yview[1], view_xview[1] + 800, view_yview[1] + 64, false);

#section
if(room == ExtraJKBonus)
    exit;
//draw_set_color(c_silver);
//draw_rectangle(0,view_yview[1],800,view_yview[1] + 64, false);

draw_set_color(c_black);
draw_set_font(fontBasicInfo);
draw_set_halign(fa_left);
draw_set_valign(fa_middle);
draw_set_alpha(1);
draw_text(16, view_yview[1] + 32, "Lives:");
draw_set_font(fontBasicInfoMini);
draw_text(240, view_yview[1] + 21, "Down - Back to Start Position");
draw_text(240, view_yview[1] + 43, "Backspace - Return Portal Room");
draw_text(472, view_yview[1] + 21, "R - Retry Current Life");
draw_text(472, view_yview[1] + 43, "Ctrl + R - Load Game");


for(var i = 0; i <= personIndex; i+=1)
{
    draw_sprite_ext(sprPlayerIdle, 0, view_xview[1] + 80 + 24 * i, view_yview[1] + 34, 0.6,0.6,0,c_white,1);
}

for(var i = personIndex + 1; i < 7; i+=1)
{
    draw_sprite_ext(sprPlayerIdle, 0, view_xview[1] + 80 + 24 * i, view_yview[1] + 34, 0.6, 0.6, 0, c_black, 0.6);
}
draw_set_color(c_green);
draw_line_width(view_xview[1] + 66, view_yview[1] + 45, view_xview[1] + 66 + 24 * star3, view_yview[1] + 45, 3);
draw_set_color(c_yellow);
draw_line_width(view_xview[1] + 66 + 24 * star3, view_yview[1] + 45, view_xview[1] + 66 + 24 * star2, view_yview[1] + 45, 3);
draw_set_color(c_red);
draw_line_width(view_xview[1] + 66 + 24 * star2, view_yview[1] + 45, view_xview[1] + 66 + 24 * star1, view_yview[1] + 45, 3);


draw_set_font(font24);
draw_set_halign(fa_right);
draw_set_valign(fa_middle);
draw_set_color(c_black);
draw_set_alpha(1);
draw_text(768, view_yview[1] + 32, string_format((round((totalTime * 50 - currentStep) / 5) / 10), 3, 1));

draw_set_circle_precision(64);
draw_set_color(make_color_rgb(47,47,47));
draw_circle(672, view_yview[1] + 32, 28, false);
//draw_set_color(c_green);
//drawArc(totalTime * 6,0.5, 27, 90, 672, view_yview[1] + 32, true);
//draw_set_color(c_orange);
//drawArc(currentStep/50 * 6,0.5, 27, 90, 672, view_yview[1] + 32, true);

var i, steps, xx, yy, radius;
steps = 64;
xx = 672;
yy = view_yview[1]+32;
radius = 27;

draw_set_color(c_green);
draw_primitive_begin(pr_trianglefan);
draw_vertex(xx, yy);
for( i = 0; i <= steps i += 1)
{
    draw_vertex(xx + lengthdir_x(radius, 90 - totalTime * 6 * i / steps), yy + lengthdir_y(radius, 90 - totalTime * 6 * i / steps));
}
draw_primitive_end();
draw_set_color(c_orange);
draw_primitive_begin(pr_trianglefan);
draw_vertex(xx, yy);
for( i = 0; i <= steps i += 1)
{
    draw_vertex(xx + lengthdir_x(radius, 90 - currentSteps/50 * 6 * i / steps), yy + lengthdir_y(radius, 90 - currentSteps/50 * 6 * i / steps));
}
draw_primitive_end();
if(currentSteps == 0)
{
    drawArc(currentStep/50 * 6,0.5, 27, 90, 672, view_yview[1] + 32, true);
}



draw_set_alpha(blackAlpha);
draw_set_color(c_black);
draw_rectangle(view_xview[0], view_yview[0], view_xview[0] + 800, view_yview[0] + 544, false);
draw_rectangle(view_xview[1], view_yview[1], view_xview[1] + 800, view_yview[1] + 64, false);




draw_reset();