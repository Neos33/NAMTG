// 2025-06-05 09:23:01
#event properties (no comments/etc. here are saved)
parent_index = obj_combatPlayerKiller;
sprite_index = spr_guardlv1_battle;
uses_physics = false;

#event create
key = 0;
xoffset = 0;
yoffset = 0;
djump = 0;
#action action_inherited
#section
name = "Junior Guard";
alarm[3] = 20;
image_speed = 1 / 8;
phase = "init";
alarm[11] = 1;
isStable = true;
hp = obj_diaoSlime_combat.hp;

#event destroy
sound_stop(sndBoomerang);
with(obj_keyBoomerang1)
{
    instance_destroy();
}

#event alarm3
if(!key)
{
    if(x > player.x)
    {
        key = instance_create(x - 12, y - 2, obj_keyBoomerang1);
    }
    else
    {
        key = instance_create(x + 12, y - 2, obj_keyBoomerang1);
    }
}
key.onHold = true;
key.onBoom = false;
key.onSmash = false;
key.onRun = false;
//key.image_angle = -16;
alarm[4] = 30;

#event alarm4
key.onHold = false;
key.onBoom = true;
key.onSmash = false;
key.onRun = false;
key.direction = point_direction(key.x, key.y, player.x, player.y);
key.speed = 30;
sound_loop(sndBoomerang);
alarm[5] = 100;

#event alarm5
vspeed = -15;
phase = "jump";

#event alarm6
if(player.x > 400)
{
    x = player.x -350;
    image_angle = -45;
}
else
{
    image_angle = 45;
    x = player.x  + 350;
}
y = player.y - 350;
instance_create(x, y, obj_teleport);
sound_fix(sndTelAtk);
dir = point_direction(x,y,player.x,player.y);
key.onSmash = true;
key.smashEnd = false;
key.onHold = false;
hspeed = 15 * cos(degtorad(dir));
vspeed = -15 * sin(degtorad(dir));
phase = "smash";



#event alarm7
key.onSmash = false;
key.onBoom = true;
image_angle = 0;
if(y > 560)
{
    y = 560;
}
key.direction = point_direction(key.x, key.y, player.x, player.y);
key.speed = 30;
sound_loop(sndBoomerang);
alarm[10] = 120;

#event alarm10
phase = "run";
sprite_index = spr_guardlv1_dash;
if(player.x > x)
{
    hspeed = 15;
    image_xscale = -1;
}
else
{
    hspeed = -15;
    image_xscale = 1;
}
key.onHold = false;
key.onRun = true;
sound_fix(sndEarth2);

#event alarm11
y+=16;

#event step
if(phase == "jump")
{
    if(vspeed > 0)
    {
        gravity = 0;
        instance_create(x,y, obj_teleport);
        sound_fix(sndTeleport);
        x = -32; 
        y = -32;
        alarm[6] = 40;
        phase = "init";
    }
    else
    {
        vspeed += 0.8;
    }
}
#section
if(phase = "smash")
{
    if(abs(vspeed) < 0.1)
    {
        vspeed = 0;
        hspeed = 0;
        instance_create(x,y, view_shaker1);
        sound_fix(sndEarth1);
        key.smashEnd = true;
        alarm[7] = 30;
        phase = "init";
    }
}
#section
if(phase = "run")
{
    if(abs(hspeed) < 0.1)
    {
        if(x > 400)
        {
            hspeed = -1.5;      
            x -= 5;              
        }
        else
        {
            hspeed = 1.5;
            x += 5;                             
        }
        vspeed = -4; 
        gravity = 0.1;
        key.onRun = false;
        key.onHold = true;
        sprite_index = spr_guardlv1_battle;
        instance_create(x,y, view_shaker1);
        phase = "final";
    }
}
#section
if(phase == "final")
{
    if(y > 559 && abs(vspeed < 0.1))
    {
        sound_fix(sndEarth1);
        y = 560;
        hspeed = 0;
        vspeed = 0;
        gravity = 0;
        phase = "init";
        
        obj_diaoSlime_combat.x = 704;
        obj_diaoSlime_combat.y = 544;
        obj_diaoSlime_combat.status = 0;
        obj_diaoSlime_combat.alarm[4] = 30;
        instance_destroy();
    }
}
#section
if(!instance_exists(obj_diaoSlime_combat))
{
    instance_destroy();
    exit;
}

hp = obj_diaoSlime_combat.hp;
image_alpha = obj_diaoSlime_combat.image_alpha;


#event collision:bullet
if(obj_diaoSlime_combat.cooldown)
{
    with(other)
    {
        hitEffect();
        instance_destroy();
    }
    exit;
}
damage = global.attackDamage;
if(other.energy >= 1.5)
{
    damage = round(global.attackDamage * other.energy);
}
damageInfo = instance_create(x + sprite_width / 2 - sprite_xoffset,y + sprite_height / 2 - sprite_yoffset,obj_damageInfo);
damageInfo.damage = damage;
if(other.energy < 1.5)
{
    damageInfo.font = fontDamageInfo1;
    damageInfo.color = c_white;        
    damageInfo.level = 1;
}
else if(other.energy <= 2)
{
    damageInfo.font = fontDamageInfo2;
    damageInfo.color = c_yellow;  
    damageInfo.level = 2;      
}
else
{
    damageInfo.font = fontDamageInfo3;
    damageInfo.color = c_red;        
    damageInfo.level = 3;
}

with(other)
{
    hitEffect();
    instance_destroy();
}
with(obj_diaoSlime_combat)
{
    if(!cooldown)
    {    
        hp -= other.damage;
        if(hp <= 0)
        {
            audio_playsound(sndDeath);
            alarm[2] = 1;
        }
        else
        {
            audio_playsound(sndBossHit);
            cooldown = true;
            alarm[0] = 1;
            alarm[1] = 50;
        }
    }
    
    if(hp <= 0)
    {
        instance_destroy();
    }
}

#event collision:block
//�ǂƂ̏Փ˔���

//�O��ɕǂ����鎞
if(place_free(x+hspeed,y) == false){
  if(hspeed <= 0){//��
    move_contact_solid(180,abs(hspeed));
  }
  if(hspeed > 0){//�E
    move_contact_solid(0,abs(hspeed));
  }
  hspeed = 0;
}

//�㉺�ɕǂ����鎞  
if(place_free(x,y+vspeed) == false){
  if(vspeed <= 0){//��
    move_contact_solid(90,abs(vspeed));
  }
  if(vspeed > 0){//��
    move_contact_solid(270,abs(vspeed));
    djump=1;
  }
  vspeed = 0;
  gravity=0
}

//�΂߂̈ʒu�ɕǂ����鎞
if (place_free(x+hspeed,y+vspeed) == false){
  hspeed=0;
}


#event draw
if(abs(hspeed > 5))
{
    for(var i = 1; i < 5; i+= 1)
    {
        xoffset = 10 * i * cos(degtorad(360 - direction));
        yoffset = -10 * i * sin(degtorad(360 - direction));
        draw_sprite_ext(sprite_index, image_index, x + xoffset,y + yoffset,1,1,image_angle,c_white,1 - 0.15 * i);
    }
}
draw_sprite_ext(sprite_index, image_index, x,y,1,1,image_angle,c_white,image_alpha);