<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_mmm_barrier_prototype</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>radius = 160;
rotateSpd = RangeClamp(2 + global.levelSpeed / 8, 2, 4);

b[0] = instance_create(x, y, obj_mmm_pathPoint);
b[1] = instance_create(x - (radius + 20), y - (radius + 20), obj_mmm_pathPoint);
b[2] = instance_create(x + (radius + 20), y - (radius + 20), obj_mmm_pathPoint);
b[3] = instance_create(x - (radius + 20), y + (radius + 20), obj_mmm_pathPoint);
b[4] = instance_create(x + (radius + 20), y + (radius + 20), obj_mmm_pathPoint);

rSpd[0] = rotateSpd * choose(-1,1);
rSpd[1] = -rotateSpd;
rSpd[2] = rotateSpd;
rSpd[3] = rotateSpd;
rSpd[4] = -rotateSpd;

centerRotateAngleSpd = 5;
for(i = 0; i &lt; 5; i+=1)
{
    b[i].image_alpha = 0;
    for(j = 0; j &lt; 3; j += 1)
    {
        if(i == 0)
        {
            p[i, j] = instance_create(b[i].x + (radius - 20) * cos(degtorad(120 * j)), b[i].y - (radius - 20) * sin(degtorad(120 * j)), obj_mmm_monster3);
        }
        else
        {
            p[i, j] = instance_create(b[i].x + radius * cos(degtorad(120 * j)), b[i].y - radius * sin(degtorad(120 * j)), obj_mmm_monster3);
        }
    }
    if(i &gt; 0)
    {
        for(j = 0; j &lt; 6; j += 1)
        {
            d[i, j] = instance_create(b[i].x + radius * cos(degtorad(45 * j)), b[i].y - radius * sin(degtorad(45 * j)), obj_mmm_pathPoint);
        }
    }
}

/*

o   
    o
        o
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for(i = 0; i &lt; 5; i+=1)
{
    with(b[i])
    {
        instance_destroy();
    }
    for(j = 0; i &lt; 3; i += 1)
    {
        with(p[i, j])
        {
            instance_destroy();
        }
    }
    if(i &gt; 0)
    {
        for(j = 0; j &lt; 6; j += 1)
        {
            with(d[i, j])
            {
                instance_destroy();
            }
        } 
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>vspeed = global.levelSpeed;

b[0].y = y;
b[1].y = y - (radius + 20);
b[2].y = y - (radius + 20);
b[3].y = y + (radius + 20);
b[4].y = y + (radius + 20);

for(i = 0; i &lt; 5; i+=1)
{
    rAngle[i] += rSpd[i];
}
centerAngle += centerRotateAngleSpd;

for(i = 0; i &lt; 4; i += 1)
{
    p[0, i].x = b[0].x + (radius - 20) * cos(degtorad(centerAngle)) * cos(degtorad(90 * i + rAngle[0]));
    p[0, i].y = b[0].y - (radius - 20) * cos(degtorad(centerAngle)) * sin(degtorad(90 * i + rAngle[0]));
}
for(i = 1; i &lt; 5; i+=1)
{
    for(j = 0; j &lt; 3; j += 1)
    {
        p[i, j].x = b[i].x + radius * cos(degtorad(120 * j + rAngle[i]));
        p[i, j].y = b[i].y - radius * sin(degtorad(120 * j + rAngle[i]));
    }
    for(j = 0; j &lt; 6; j += 1)
    {
        d[i, j].x = b[i].x + radius * cos(degtorad(120 * j + rAngle[i]));
        d[i, j].y = b[i].y - radius * sin(degtorad(120 * j + rAngle[i]));
    } 
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(y &gt; 1200)
{
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
