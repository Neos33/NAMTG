<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100000</depth>
  <persistent>0</persistent>
  <parentName>obj_combatController</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(initialized)
    exit;
sound_stop_all();
if(room == battlefasfroom || room == Roomavoidence)
{
    if(!instance_exists(obj_superFasf_combat) &amp;&amp; room != Roomavoidence)
    {
        m = instance_create(704, 544, global.combatObj);
        m.hp = global.mHP;
        m.atk = global.mAtk;
        m.def = global.mDef;
        m.ex = global.mEx;
    }
    else
    {
        obj_superFasf_combat.hspeed = 0;
        obj_superFasf_combat.vspeed = 0;
        obj_superFasf_combat.visible = 1;
        obj_superFasf_combat.x=400;
        obj_superFasf_combat.y=304;
        obj_superFasf_combat.image_blend = c_red;
        obj_superFasf_combat.image_speed = 1 / 6;
        obj_superFasf_combat.image_index = 0;
    }
}
else
{
    m = instance_create(704, 544, global.combatObj);
    m.hp = global.mHP;
    m.atk = global.mAtk;
    m.def = global.mDef;
    m.ex = global.mEx;
}
global.cooldown = false;
if(!FMODInstanceGetPaused(global.currentBGM))
{
    FMODInstanceSetPaused(global.currentBGM, true);
}
if(global.currentFloor &lt;= 10)
{
    if(room == battleroom4 || room == battleroom6)
    {
        battleBGM = choose(sndBattle3, sndBattle4);
    }
    else if(room ==battleroom12)
    {
    //    battleBGM=happymusic;
    }
    else
    {
        battleBGM = choose(sndBattle1, sndBattle2);
    }
}
else
{
    battleBGM = choose(sndBattle5, sndBattle6, sndBattle7, sndBattle8);
}
if(room != battlefasfroom &amp;&amp; room != battleroom12 &amp;&amp; room != rDracula)
{
sound_loop(battleBGM);
}
else if(room == battlefasfroom)
{
    global.currentBGM = global.BGMsupfasf;
    if(FMODInstanceGetPaused(global.BGMsupfasf))
    {
        audio_resumemusic_volume(global.BGMsupfasf);
    }
    else if(!FMODInstanceIsPlaying(global.BGMsupfasf))
    {
        audio_loopmusic_volume(global.BGMsupfasf);   
    }
    /*else if(!SS_IsSoundLooping(global.BGMsupfasf))
    {
        audio_loopmusic_volume(global.BGMsupfasf);
    }*/
}
else if(room == battleroom12)
{
    global.currentBGM = global.BGM_RedKey;
    if(FMODInstanceGetPaused(global.BGM_RedKey))
    {
        audio_resumemusic_volume(global.BGM_RedKey);
    }
    else if(!FMODInstanceIsPlaying(global.BGM_RedKey))
    {
        audio_loopmusic_volume(global.BGM_RedKey);   
    }
    /*else if(!SS_IsSoundLooping(global.BGM_RedKey))
    {
        audio_loopmusic_volume(global.BGM_RedKey);
    }*/
}
else if(room == rDracula)
{
    global.currentBGM = global.BGMDracula;
    if(FMODInstanceGetPaused(global.BGMDracula))
    {
        audio_resumemusic_volume(global.BGMDracula);
    }
    else if(!FMODInstanceIsPlaying(global.BGMDracula))
    {
        audio_loopmusic_volume(global.BGMDracula);   
    }
    /*else if(!SS_IsSoundLooping(global.BGMDracula))
    {
        audio_loopmusic_volume(global.BGMDracula);
    }*/
}


global.playerHP = global.hp;
global.combatTime = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.inCombat = false;
with(obj_combatPlayerKiller)
{
    instance_destroy();
}
global.monsters[global.combatIndex] = 1;
if(room != battleroom12)
{
sound_stop(battleBGM);
}
//SS_ResumeSound(global.stageMusic);
if(instance_exists(player) &amp;&amp; player.x &gt; 0)
{
    
    if(!global.isRandom)
    {
        //transition_kind = 21;
    }
    room_goto(global.stageRoom);
    if(global.special[2])
    {
        global.expBonus += floor(global.mEx * 1.5);
    }
    else
    {
        global.expBonus += global.mEx;
    }
    
    player.x = global.roomX;
    player.y = global.roomY;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.combatTime += 1;
/*if(global.special[7])
{
    if(instance_exists(obj_monsterBattlePrototype))
    {
        if(obj_monsterBattlePrototype.x &gt; view_xview[0] &amp;&amp; obj_monsterBattlePrototype.x &lt; view_xview[0] + view_wview[0] &amp;&amp; obj_monsterBattlePrototype.y &gt; view_yview[0] &amp;&amp; obj_monsterBattlePrototype.y &lt; view_yview[0] + view_hview[0])
        {
            global.isTrack = true;
            with(obj_monsterBattlePrototype)
            {
                global.trackX = x + (sprite_width / 2 - sprite_xoffset) * image_xscale;
                global.trackY = y + (sprite_height / 2 - sprite_yoffset) * image_yscale;
            }
        }
    }
}
else
{
    global.isTrack = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_halign(fa_right);
draw_set_font(font12);
draw_set_color(c_silver);
draw_set_alpha(1);
if(!instance_exists(obj_monsterBattlePrototype))
{
    draw_text(view_xview[1] + view_wview[1] - 64, view_yview[0] + 64, "");
}
else
{
    draw_text(view_xview[1] + view_wview[1] - 64, view_yview[1] + 64, obj_monsterBattlePrototype.name);
}


draw_set_halign(fa_left)
draw_text(view_xview[0] +64, view_yview[0] + 64, "Kid");

if(global.GalleryBossFight)
{
    usedHp = global.GalleryBossFightHp;
}
else
{
    usedHp = global.hp;
}

if(instance_exists(player))
{
    drawMagicHP();
    if(usedHp &lt; 233)
    {
        for(k = 0; k &lt; floor(usedHp / 100); k+=1)
        {
            draw_sprite_ext(spr_hp, 0, view_xview[0] +64 + 24 * k, view_yview[0] + 80, .75, .75, 0, c_white, 1);
        }
        
        for(j = 0; j &lt; floor((usedHp mod 100) / 10); j+=1)
        {
            draw_sprite(spr_heart10, 0, view_xview[0] +64 + floor(usedHp / 100) * 24 + 20 * j, view_yview[0] + 92);
        }
        
        for(i = 0; i &lt; (usedHp mod 10); i+= 1)
        {
            draw_sprite(spr_smallHeart, 0, view_xview[0] +64 + floor(usedHp / 100) * 24 + 20 * floor((usedHp mod 100) / 10) + 14 * i, view_yview[0] + 98);
        }
    }
    else
    {
        draw_sprite_ext(spr_smallHeart, 0, view_xview[0] +64, view_yview[0] + 92, .75, .75, 0, c_white, 1);
        draw_set_font(fontBasicInfoMini);
        draw_set_color(c_silver);
        draw_set_halign(fa_left);
        draw_set_valign(fa_middle);
        draw_text(view_xview[0] +78, view_yview[0] + 92, "x " + string(usedHp));
    }
}

if(dontDrawMonster) exit;
if(obj_monsterBattlePrototype.hp &lt; 233)
{
    for(k = 0; k &lt; floor(obj_monsterBattlePrototype.hp / 100); k+=1)
    {
        draw_sprite_ext(spr_hp, 0, view_xview[1] + view_wview[1] - 64 - 24 * (k + 1), view_yview[0] + 80, .75, .75, 0, c_white, 1);
    }
    
    for(j = 0; j &lt; floor((obj_monsterBattlePrototype.hp mod 100) / 10); j+=1)
    {
        draw_sprite(spr_heart10, 0, view_xview[1] + view_wview[1] - 64 - floor(obj_monsterBattlePrototype.hp / 100) * 24 - 20 * (j + 1), view_yview[1] + 92);
    }
    
    for(i = 0; i &lt; (obj_monsterBattlePrototype.hp mod 10); i+= 1)
    {
        draw_sprite(spr_smallHeart, 0, view_xview[1] + view_wview[1] - 64 - floor(obj_monsterBattlePrototype.hp / 100) * 24 - 20 * floor((obj_monsterBattlePrototype.hp mod 100) / 10) - 14 * (i + 1), view_yview[1] + 98);
    }
}
else
{
    draw_set_font(fontBasicInfoMini);
    draw_set_color(c_silver);
    draw_set_halign(fa_right);
    draw_set_valign(fa_middle);
    strWidth = string_width("x " + string(obj_monsterBattlePrototype.hp));
    draw_text(view_xview[1] + view_wview[1] - 64, view_yview[1] + 92, "x " + string(obj_monsterBattlePrototype.hp));
    draw_sprite_ext(spr_smallHeart, 0, view_xview[1] + view_wview[0] - 64 - strWidth - 14, view_yview[1] + 92, .75, .75, 0, c_white, 1);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
