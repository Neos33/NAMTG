<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_darkWarrior_bomb_fire_1</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_xscale = 1;//0.1;
image_yscale = 1;//0.1;
image_speed = 0;
alarm[0] = 1;
isStable = 1;

sprInd = 0;
spr[0] = spr_darkWarrior_bomb_fire_1;
spr[1] = spr_darkWarrior_bomb_fire_2;
spr[2] = spr_darkWarrior_bomb_fire_3;
sprCount = 3;



start = false;
leftBombWall = false;
rightBombWall = false;
upBombWall = false;
downBombWall = false;


p = 0;

leftP = 0;
rightP = 0;
upP = 0;
downP = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>start = false;
with(h)
{
    instance_destroy();
}
with(v)
{
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(sprInd &gt; 0)
{
    //image_xscale -= 0.05;
    //image_yscale -= 0.05;
    sprInd -= 1;
    sprite_index = spr[sprInd];    
    alarm[1] = 5;
}
else
{
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(sprInd &lt; sprCount)
{
    //image_xscale += 0.05;
    //image_yscale += 0.05;
    sprite_index = spr[sprInd];
    sprInd += 1;
    alarm[0] = 5;
}
else
{
    start = true;
    sound_fix(sndFire1);
    if(leftBombWall)
    {
        var bombWall = instance_position(x-48-leftP * 32,y-16,obj_dwBombWall);
        if(bombWall)
        {
            bombWall.alarm[0] = 1;
        }
        leftBombWall = false;
    }
    if(rightBombWall)
    {
        var bombWall = instance_position(x+16+rightP * 32,y-16,obj_dwBombWall);
        if(bombWall)
        {
            bombWall.alarm[0] = 1;
        }
        rightBombWall = false;
    }
    if(upBombWall)
    {
        var bombWall = instance_position(x-16,y-48-upP * 32,obj_dwBombWall);
        if(bombWall)
        {
            bombWall.alarm[0] = 1;
        }
        upBombWall = false;
    }
    if(downBombWall)
    {
        var bombWall = instance_position(x-16,y+16+downP * 32,obj_dwBombWall);
        if(bombWall)
        {
            bombWall.alarm[0] = 1;
        }
        downBombWall = false;
    }
    var h = instance_create(x-16-leftP * 32, y-16, obj_dwBombDmg);
    h.image_xscale = leftP + rightP + 1;
    var v = instance_create(x-16, y-16-upP * 32, obj_dwBombDmg);
    v.image_yscale = upP + downP + 1;
    alarm[1] = 30;
    alarm[2] = 30;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var left = x - p * 32 - 16;
var right = x + p * 32 + 16;
var up = y - p * 32 - 16;
var down = y + p * 32 + 16;

if(collision_line(x,y,left+16,y,block,true,true) || collision_line(x,y,left+16,y,obj_dwBombWall,true,true))
{
    leftP = 0;
    for(i = x - 48; i &gt;= left; i -= 32)
    {   
        if(instance_position(i,y - 16,block))
        {
            leftBombWall = false;
            break; 
        }
        if(instance_position(i,y - 16,obj_dwBombWall))
        {
            leftBombWall = true;
            break; 
        }
        leftP += 1;
    }
}
else
{
    leftP = p;
}

if(collision_line(x,y,right-16,y,block,true,true) || collision_line(x,y,right-16,y,obj_dwBombWall,true,true))
{
    rightP = 0;
    for(i = x +16; i &lt;= right - 32; i += 32)
    {   
        if(instance_position(i,y - 16,block))
        {
            rightBombWall = false;
            break; 
        }
        if(instance_position(i,y - 16,obj_dwBombWall))
        {
            rightBombWall = true;
            break; 
        }
        rightP += 1;
    }
}
else
{
    rightP = p;
}

if(collision_line(x,y,x, up + 16,block,true,true) || collision_line(x,y,x,up + 16,obj_dwBombWall,true,true))
{
    upP = 0;
    for(i = y - 48; i &gt;= up; i -= 32)
    {   
        if(instance_position(x - 16,i,block))
        {
            upBombWall = false;
            break; 
        }
        if(instance_position(x - 16,i,obj_dwBombWall))
        {
            upBombWall = true;
            break; 
        }
        upP += 1;
    }
}
else
{
    upP = p;
}

if(collision_line(x,y,x,down-16,block,true,true) || collision_line(x,y,x,down-16,obj_dwBombWall,true,true))
{
    downP = 0;
    for(i = y +16; i &lt;= down - 32; i += 32)
    {   
        if(instance_position(x - 16,i,block))
        {
            downBombWall = false;
            break; 
        }
        if(instance_position(x - 16,i,obj_dwBombWall))
        {
            downBombWall = true;
            break; 
        }
        downP += 1;
    }
}
else
{
    downP = p;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_current();
//if(!start) exit;
for(var i = 1; i &lt;= leftP; i += 1)
{
    if(i &lt; p)
    {
        draw_sprite(sprite_index, 5, x-32*i,y);
    }
    else
    {
        draw_sprite(sprite_index,4, x-32*i,y);
    }
}

for(var i = 1; i &lt;= rightP; i += 1)
{
    if(i &lt; p)
    {
        draw_sprite(sprite_index, 5, x+32*i,y);
    }
    else
    {
        draw_sprite(sprite_index,6, x+32*i,y);
    }
}

for(var i = 1; i &lt;= upP; i += 1)
{
    if(i &lt; p)
    {
        draw_sprite(sprite_index, 2, x,y-32*i);
    }
    else
    {
        draw_sprite(sprite_index,1, x,y-32*i);
    }
}

for(var i = 1; i &lt;= downP; i += 1)
{
    if(i &lt; p)
    {
        draw_sprite(sprite_index, 2, x,y+32*i);
    }
    else
    {
        draw_sprite(sprite_index,3, x,y+32*i);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
