<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_mmm_barrier_prototype</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>record = obj_mmm_gameController.currentMeter;
radius = 160;
isStop = choose(false,true);
stopFlag = 0;
if(record &lt; 400)
{
    level = 1;
    rotateSpd = 2.5;
    stopInterval = 30;
}
else if(record &gt;= 400 &amp;&amp; record &lt; 750)
{
    level = 1;
    rotateSpd = 3;
    stopInterval = 25;
}
else if(record &gt;= 750 &amp;&amp; record &lt; 1000)
{
    level = 1;
    rotateSpd = 3.5;
    stopInterval = 20;
}
else if(record &gt;= 1000)
{
    level = 1;
    rotateSpd = 4;
    stopInterval = 15;
}
rotateSpd *= choose(-1,1);
for(i = 0; i &lt; level + 1; i+=1)
{
    px = x + radius * cos(degtorad(i * 360 / (level + 1)));
    py = y - radius * sin(degtorad(i * 360 / (level + 1)));
    p[i] = instance_create(px, py, obj_mmm_monster2);
    p[i].angle = i * 360 / (level + 1);
    p[i].stepAngle = 1 + floor(global.levelSpeed);
}

for(i = 0; i &lt; 12; i+=1)
{
    px = x + radius * cos(degtorad(i * 30));
    py = y - radius * sin(degtorad(i * 30));
    d[i] = instance_create(px, py, obj_mmm_pathPoint);
}

if(isStop)
{
    alarm[0] = 30;
}
/*
 o
  \
     
    \
     o
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for(i = 0; i &lt; 12; i+=1)
{
    with(d[i])
    {
        instance_destroy();
    }
}

for(i = 0; i &lt; level + 1; i+=1)
{
    with(p[i])
    {
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>stopFlag ^= 1;
alarm[0] = stopInterval;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>vspeed = global.levelSpeed;

for(i = 0; i &lt; 12; i+=1)
{
    d[i].x = x + radius * cos(degtorad(i * 30 + angle));
    d[i].y = y - radius * sin(degtorad(i * 30 + angle));
}

for(i = 0; i &lt; level + 1; i+=1)
{
    p[i].x = x + radius * cos(degtorad(i * 360 / (level + 1) + angle));
    p[i].y = y - radius * sin(degtorad(i * 360 / (level + 1) + angle));
}
if(!stopFlag)
    angle += rotateSpd;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(y &gt; 1000)
{
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
