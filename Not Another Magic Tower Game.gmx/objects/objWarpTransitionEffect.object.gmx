<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-4000</depth>
  <persistent>0</persistent>
  <parentName>obj_transitionbase</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
//previous_room = sprite_create_from_surface(application_surface, 0, 0, 800, 608, false, false, 0, 0);

var _surf_temp = surface_create(800, 608);
surface_set_target(_surf_temp);
    draw_clear(c_black);
    draw_surface(application_surface, 0, 0);
    
    draw_set_colour_write_enable(0, 0, 0, 1);
        draw_rectangle(0, 0, 800, 608, false);
    draw_set_colour_write_enable(1, 1, 1, 1);
surface_reset_target();

previous_room = sprite_create_from_surface(_surf_temp, 0, 0, 800, 608, false, false, 0, 0);
surface_free(_surf_temp);

next_room = noone;

target_y = 608;
current_y = 0;


draw_transition = false;


//print("SE CREOOOOOOOOOOOOOOOO")
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if sprite_exists(previous_room)
sprite_delete(previous_room);

if sprite_exists(next_room)
sprite_delete(next_room);

with player
{
    vspeed = 0;
    hspeed = 0;
}

/*if surface_exists(current_room)
surface_free(current_room);

if surface_exists(surface_transition)
surface_free(surface_transition);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*current_y += 1;
if current_y &gt;= target_y
instance_destroy();


if time == 1
{
next_room = sprite_create_from_surface(application_surface, 0, 0, 800, 608, false, false, 0, 0);
draw_transition = true;
}

time++;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(transit)
{
    currentframe++;
        
    if (currentframe &gt; maxframes) {
        instance_destroy() // The transition has finished so destroy it
    }
    
    
    // We are now on the second room so record that room. 
    if (currentframe == 2) { 
        /*sur_newroom = surface_create(room_width, room_height);
        surface_set_target(sur_newroom)
            // Copy
            surface_copy(sur_newroom, 0, 0, application_surface);
        
            draw_set_colour_write_enable(false, false, false, true);
            draw_rectangle(0, 0, room_width, room_height, false);
            draw_set_colour_write_enable(true, true, true, true);
            
        surface_reset_target();*/
        //next_room = sprite_create_from_surface(application_surface, 0, 0, 800, 608, false, false, 0, 0);
        var _surf_temp = surface_create(800, 608);
        surface_set_target(_surf_temp);
            draw_clear(c_black);
            draw_surface(application_surface, 0, 0);
            
            draw_set_colour_write_enable(0, 0, 0, 1);
                draw_rectangle(0, 0, 800, 608, false);
            draw_set_colour_write_enable(1, 1, 1, 1);
        surface_reset_target();
        
        next_room = sprite_create_from_surface(_surf_temp, 0, 0, 800, 608, false, false, 0, 0);
        surface_free(_surf_temp);
        draw_transition = true;
        //print("AAAAAAAAAAAAAAAAAAAAAAAA")
        instance_deactivate_all(true);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// @desc
if draw_transition
{
    var norm = currentframe / maxframes;
    
    switch dir
    {
        // Up
        case 90:
            draw_sprite(next_room, 0, 0, norm * 608 - 608);
            draw_sprite(previous_room, 0, 0, norm * 608);
        break
        
        // Down
        case 270:
            draw_sprite(next_room, 0, 0, 608 - norm * 608);
            draw_sprite(previous_room, 0, 0, norm * -608);
        break
        
        // Right
        case 0:
            draw_sprite(next_room, 0, 0, norm * 608 - 608);
            draw_sprite(previous_room, 0, 0, norm * 608);
        break
        
        // Left
        case 180:
            draw_sprite(next_room, 0, 0, norm * 608 - 608);
            draw_sprite(previous_room, 0, 0, norm * 608);
        break
    }

}

if currentframe == 1
{
    draw_sprite_ext(previous_room, 0, 0, 0, 1, 1, 0, c_white, 1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
