<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_mmm_barrier_prototype</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>moveSpd = 0;
d2 = 0;
d1 = 0;
gap = 0;
bounceSpd = 0;
acc = 0;
steps = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>record = obj_mmm_gameController.currentMeter;
gap = 80;
moveSpd *= choose(-1,1);
bounceGap = 80;
steps = RangeClamp(30 - floor(global.levelSpeed), 10, 30);
acc = bounceGap * 2 / sqr(steps);
bounceSpd = acc * steps;

for(i = 0; i &lt; 4; i+=1)
{
    p[i] = instance_create(x + ((i mod 2) - 0.5) * gap, y + (floor(i / 2) - 0.5) * gap, obj_mmm_monster1);
}

d1 = instance_create(x - 2 * gap, y, obj_mmm_pathPoint);
for(i = 0; i &lt; 4; i+=1)
{
    p1[i] = instance_create(d1.x + ((i mod 2) - 0.5) * gap, d1.y + (floor(i / 2) - 0.5) * gap, obj_mmm_monster1);
}

d2 = instance_create(x + 2 *gap, y, obj_mmm_pathPoint);
for(i = 0; i &lt; 4; i+=1)
{
    p2[i] = instance_create(d2.x + ((i mod 2) - 0.5) * gap, d2.y + (floor(i / 2) - 0.5) * gap, obj_mmm_monster1);
}

decide = choose(0,1);
if(decide == 0)
{
    d2.hspeed = bounceSpd;
    alarm[0] = 1;
}
else
{
    d1.hspeed = -bounceSpd;
    alarm[1] = 1;
}

/*

oooo  oo
oooo  oo
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for(var i = 0; i &lt; 4; i+=1)
{
    with(p[i])
    {
        instance_destroy();
    }
    with(p1[i])
    {
        instance_destroy();
    }
    with(p2[i])
    {
        instance_destroy();
    }
}
with(d1)
{
    instance_destroy();
}

with(d2)
{
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(d1.x &lt; x - 2 * gap)
{
    d1.hspeed += acc;
    alarm[1] = 1;
}
else
{
    d1.hspeed = 0;
    d1.x = x - 2 * gap;
    d2.hspeed = bounceSpd;
    d2.x += bounceSpd;
    alarm[0] = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(d2.x &gt; x + 2 * gap)
{
    d2.hspeed -= acc;
    alarm[0] = 1;
}
else
{
    d2.x = x + 2 * gap;
    d2.hspeed = 0;
    d1.hspeed = -bounceSpd;
    d1.x -= bounceSpd;
    alarm[1] = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>vspeed = global.levelSpeed;
steps = 30 - floor(global.levelSpeed);
acc = bounceGap * 2 / sqr(steps);
bounceSpd = acc * steps;

d1.y = y;
d2.y = y;

for(var i = 0; i &lt; 4; i += 1)
{
    p[i].y = y + (floor(i / 2) - 0.5) * gap;
    p1[i].y = y + (floor(i / 2) - 0.5) * gap;
    p1[i].x = d1.x + ((i mod 2) - 0.5) * gap;
    p2[i].y = y + (floor(i / 2) - 0.5) * gap;
    p2[i].x = d2.x + ((i mod 2) - 0.5) * gap;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(y &gt; 1200)
{
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
