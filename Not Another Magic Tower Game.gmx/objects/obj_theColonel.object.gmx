<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_taisa_combat</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>50</depth>
  <persistent>0</persistent>
  <parentName>obj_monsterPrototype</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
atk=666;
def=140;
hp=1;
ex=0;
name = "Fapple";
combatObj = obj_taisa;
mybattleroom = rTaisa;
image_alpha = 0.8;
alarm[10] = 1;

ps = part_system_create();
part_system_depth(100, ps);

part = part_type_create();
part_type_shape(part,pt_shape_spark);
part_type_size(part,0.30,0.50,0,0);
part_type_scale(part,1,1);
part_type_color3(part,16711808,10485760,8388672);
part_type_alpha3(part,0.80,0.50,0);
part_type_speed(part,0.50,0.50,0,0);
part_type_direction(part,0,359,0,0);
part_type_orientation(part,0,0,0,1,0);
part_type_blend(part,1);
part_type_life(part,40,60);

emitter1 = part_emitter_create(ps);
part_emitter_region(ps,emitter1,x, x + 256,y,y,3,0);

emitter2 = part_emitter_create(ps);
part_emitter_region(ps,emitter2,x, x + 256,y + 256,y + 256,3,0);

emitter3 = part_emitter_create(ps);
part_emitter_region(ps,emitter3,x, x,y ,y + 256,3,0);

emitter4 = part_emitter_create(ps);
part_emitter_region(ps,emitter4,x + 256, x + 256,y ,y + 256,3,0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//part_type_clear(part);

if(part_emitter_exists(ps, emitter1))
{
    part_emitter_destroy(ps, emitter1);
}

if(part_emitter_exists(ps, emitter2))
{
    part_emitter_destroy(ps, emitter2);
}

if(part_emitter_exists(ps, emitter3))
{
    part_emitter_destroy(ps, emitter3);
}

if(part_emitter_exists(ps, emitter4))
{
    part_emitter_destroy(ps, emitter4);
}

if(part_type_exists(part))
{
    part_type_destroy(part);
}

if(part_system_exists(ps))
{
    part_system_destroy(ps);
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(image_alpha &gt; 0.8)
{
    image_alpha -= 0.01;
    alarm[11] = 1;
}
else
{
    alarm[10] = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(image_alpha &lt; 1)
{
    image_alpha += 0.01;
    alarm[10] = 1;
}
else
{
    alarm[11] = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>part_emitter_burst(ps,emitter1,part,5);
part_emitter_burst(ps,emitter2,part,5);
part_emitter_burst(ps,emitter3,part,5);
part_emitter_burst(ps,emitter4,part,5);
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>part_type_clear(part);

if(part_emitter_exists(ps, emitter1))
{
    part_emitter_destroy(ps, emitter1);
}

if(part_emitter_exists(ps, emitter2))
{
    part_emitter_destroy(ps, emitter2);
}

if(part_emitter_exists(ps, emitter3))
{
    part_emitter_destroy(ps, emitter3);
}

if(part_emitter_exists(ps, emitter4))
{
    part_emitter_destroy(ps, emitter4);
}

if(part_type_exists(part))
{
    part_type_destroy(part);
}

if(part_system_exists(ps))
{
    part_system_destroy(ps);
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_current();
if(status == 0)
{
    draw_set_color(c_green);
}
else if(status == 1)
{
    draw_set_color(c_yellow);
}
else
{
    draw_set_color(c_red);
}
draw_set_alpha(image_alpha);
draw_roundrect(x + sprite_width - 12,y, x + sprite_width,y + 12,false);

draw_reset_color();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
