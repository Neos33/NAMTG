<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2000000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//spaceItems = 0;
deactivated = 0;
pauseImg = 0;
xx = 0;
yy = 0;
index = 0;
py = 0;
lvlRequired = 0;
currentExp = 0;
bonusGap = 0;

sx0 = 0;
sy0 = 0;
img_index = 0;
pageCount = 0;
mIndex = 0;
ppAvailable = 0;
count = 0;
maxPage = 0;
pnAvailable = 0;
sCount = 0;
ppx = 0;
ppy = 0;
pageY = 0;
sx = 0;
sy = 0

beginX = 0;
beginY = 0;
statusGap = 0;

img_index = 0;

spDes = 0;

px0 = 0;
py0 = 0;
iCount1 = 0;
maxSpecial = 0;
tempInd = 0;

specialSelection = 0;
spDes = 0;

bLineIndent = 0;

bColX1 = 0;
bY1 = 0;
bXGap = 0;
bYGap = 0;
bLineIndent = 0;
button1 = 0;

aIndex = 0;
achievementCount = 0;
sCount = 0;
aX = 0;
aY = 0;
infoGap = 0;

backupColor1 = 0;
backupColor2 = 0;

cheatSelection = 0;

isRefresh = 0;

surf1 = 0;
surf2 = 0;



sSpr = array_create(30);
swordsSpr = array_create(30);
sheildsSpr = array_create(30);
colorKey = array_create(30);
colorOffset = array_create(30);
description = array_create(30);
a_bns = array_create(30);
d_bns = array_create(30);
h_bns = array_create(30);

k1_bns = array_create(30);
k2_bns = array_create(30);
k3_bns = array_create(30);
k4_bns = array_create(30);
k5_bns = array_create(30);
k6_bns = array_create(30);
rm = array_create(30);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>list = ds_list_create();
img_index = 0;

deactivated = false;
drawTeleportTarget = false;

alarm[0] = 1;
maxIndex = 6;
pauseImg = noone;
initialized = false;
initialized1 = false;
maxSpecial = 16;
specialPerLine = 11;
sSpr[0] = spr_floorTran;
sSpr[1] = spr_fairyLetter;
sSpr[2] = spr_expCoin;
sSpr[3] = spr_secretDetector;
sSpr[4] = spr_metalShoes;
sSpr[5] = spr_lostMemo;
sSpr[6] = spr_saintWand;
sSpr[7] = spr_magicRing;
sSpr[8] = spr_kuiHuaBaoDian;
sSpr[9] = spr_frozenBadge;
sSpr[10] = spr_strangeMap;
sSpr[11] = spr_saintCross;
sSpr[12] = spr_renalTreasure;
sSpr[13] = spr_fairyTail;
sSpr[14] = spr_magicCloak1;
sSpr[15] = spr_enegyAplifier1;
sSpr[16] = spr_saintSword1;
sSpr[17] = spr_saintShield1;
sSpr[18] = spr_fairyCrystal;
swordsSpr[0] = spr_sword_lv1;
swordsSpr[1] = spr_sword_lv2;
swordsSpr[2] = spr_sword_lv3;
sheildsSpr[0] = spr_shield_lv1;
sheildsSpr[1] = spr_shield_lv2;
sheildsSpr[2] = spr_shield_lv3;

colorKey[0] = spr_diamondKey;
colorKey[1] = spr_clubKey;
colorKey[2] = spr_heartKey;
colorKey[3] = spr_spadeKey;
colorOffset[0] = -14;
colorOffset[1] = -6;
colorOffset[2] = 4;
colorOffset[3] = 14;

mIndex = 0;
aIndex = 0;
ppx = 380;
pnx = 600;
pageY = 582;
pageX = 480;

description[0] = "An artifact that make floor transmission possible. Click 'H' to use it. Note that the magic only take effect for floors once you arrived.";
description[1] = "Looks like fairy's note book. But seems to be written with fariy language, cannot read at all."
description[2] = "An ancient coin. It provides you addtional exp(1.5x) when beating a monster.";
description[3] = "A crystal orb. It helps you detect secret walls in the magic tower."
description[4] = "A really heavy metal shoes. Keep you no injury from lava and no slipery on ice."
description[5] = "The lost memo. It recorded descriptions for all achievements."
description[6] = "The saint wand that contains mysterious power. It can block the first damage you received in each battle.";
description[7] = "The magic ring makes you be able to gathering power by long pressing 'Shoot' button. The longer you pressed, the larger amount of power you gathered. (Power range 1x ~ 2.25x)";
description[8] = "An old book. It records the essence of the combat, the formulas help decreases immunity frame of enemies.";
description[9] = "The frozen badge, which exudes extreme chill. The holder can use it to freeze the lava. Use it the same way as opening the doors.";
description[10] = "A strange map, cannot get any info from it at all. Fairy said to bring it to 15F first.";
description[11] = "";
description[12] = "";
description[13] = "";
description[14] = "The Magic cloak blocks damages for you in each battle before you losing hp. The block amount equals to the total monsters number that you killed.(Does not take effect in gallery)";
description[15] = "The energy stone. Once set to the magic ring, it will amplify the maximum energy can be gathered by the magic ring to 3.5x, and speed up the time that is needed to get full charged.";
description[16] = "The saint sword enhance every damange you deal by 50 percentage.(Does not take effect in gallery)";
description[17] = "The saint shield can reduce every damage you received by 50 percentage.(Does not take effect in gallery)";
description[18] = "Fairy crystal, the most valuable treasure for fairies, will heal your wounds during the fight slowly(5hp/s outside gallery, 1hp per 2 secs in challenge room) for the damage you just received.";

achievementCount = 109;

a_bns[1] = 0;
d_bns[1] = 0;
h_bns[1] = 3;
global.levelRequired[0] = 30;

a_bns[2] = 0;
d_bns[2] = 2;
h_bns[2] = 5;
global.levelRequired[1] = 100;

a_bns[3] = 2;
d_bns[3] = 0;
h_bns[3] = 9;
global.levelRequired[2] = 250;

a_bns[4] = 2;
d_bns[4] = 2;
h_bns[4] = 15;
global.levelRequired[3] = 500;

k1_bns[5] = 1;
k2_bns[5] = 1;
k3_bns[5] = 1;
global.levelRequired[4] = 800;

k4_bns[6] = 1;
global.levelRequired[5] = 1250;

h_bns[7] = 100;
global.levelRequired[6] = 1800;

d_bns[8] = 10;
global.levelRequired[7] = 2500;

a_bns[9] = 10;
global.levelRequired[8] = 3500;

k1_bns[10] = 1;
k2_bns[10] = 1;
k3_bns[10] = 1;
k4_bns[10] = 1;
k5_bns[10] = 1;
k5_bns[10] = 1;
global.levelRequired[9] = 4500;

a_bns[11] = 3;
d_bns[11] = 3;
h_bns[11] = 300;
global.levelRequired[10] = 5700;

global.levelRequired[11] = 99999;

rx[0,0] = 224 + 17;
ry[0,0] = 448 + 23;
rx[0,1] = 480 + 17;
ry[0,1] = 64;
rx[1,0] = 480;
ry[1,0] = 544 + 23;
rx[1,1] = 704 + 17;
ry[1,1] = 544 + 23;
rx[2,0] = 704 + 17;
ry[2,0] = 544 + 23;
rx[2,1] = 704;
ry[2,1] = 32 + 23;
rx[3,0] = 704 + 17;
ry[3,0] = 32 + 23;
if(global.yellowDoors[8])
{
    rx[3,1] = 512;
    ry[3,1] = 288 + 23;
}
else if(global.yellowDoors[10])
{
    rx[3,1] = 480;
    ry[3,1] = 288 + 23;
}
else if(global.yellowDoors[9])
{
    rx[3,1] = 512;
    ry[3,1] = 256 + 23;
}
else if(global.yellowDoors[11])
{
    rx[3,1] = 512;
    ry[3,1] = 320 + 23;
}
rx[4,0] = 512 + 17;
ry[4,0] = 288 + 23;
rx[4,1] = 704 + 17;
ry[4,1] = 288 + 23;
rx[5,0] = 736 + 17;
ry[5,0] = 64 + 23;
rx[5,1] = 576 + 17;
ry[5,1] = 32 + 23;
rx[6,0] = 576 + 17;
ry[6,0] = 32 + 23;
rx[6,1] = 704 + 17;
ry[6,1] = 32 + 23;
rx[7,0] = 736 + 17;
ry[7,0] = 64 + 23;
rx[7,1] = 256 + 17;
ry[7,1] = 32 + 23;
rx[8,0] = 256 + 17;
ry[8,0] = 32 + 23;
rx[8,1] = 704 + 17;
ry[8,1] = 32 + 23;
rx[9,0] = 704 + 17;
ry[9,0] = 32 + 23;
rx[9,1] = 256 + 17;
ry[9,1] = 544 + 23;
rx[10,0] = 256 + 17;
ry[10,0] = 544 + 23;
rx[10,1] = 480 + 17;
ry[10,1] = 192 + 23;
/*if(global.testAvailable)
{
    rx[11,0] = 425 + 17;
    ry[11,0] = 288 + 23;
}
else
{
    rx[11,0] = 256 + 17;
    ry[11,0] = 544 + 23;
}*/
rx[11,0] = 425 + 17;
ry[11,0] = 288 + 23;
rx[11,1] = 535 + 17;
ry[11,1] = 288 + 23;
rx[12,0] = 576 + 17;
ry[12,0] = 288 + 23;
rx[12,1] = 384 + 17;
ry[12,1] = 288 + 23;
rx[13,0] = 470 + 17;
ry[13,0] = 288 + 23;
rx[13,1] = 490 + 17;
ry[13,1] = 288 + 23;
rx[14,0] = 352 + 17;
ry[14,0] = 320 + 23;
rx[14,1] = 464 + 17;
ry[14,1] = 480 + 23;
rx[15,0] = 484 + 17;
ry[15,0] = 544 + 23;
rx[15,1] = 458 + 17;
ry[15,1] = 32 + 23;
rx[16,0] = 480 + 17;
ry[16,0] = 64 + 23;
rx[16,1] = 480 + 17;
ry[16,1] = 448 + 23;
rx[17,0] = 464 + 17;
ry[17,0] = 544 + 23;
rx[17,1] = 480 + 17;
ry[17,1] = 32 + 23;
rx[18,0] = 464 + 17;
ry[18,0] = 544 + 23;
rx[18,1] = 480 + 17;
ry[18,1] = 32 + 23;
rx[19,0] = 416 + 17;
ry[19,0] = 544 + 23;

rm[0] = rBegining;
rm[1] = r1F;
rm[2] = r2F;
rm[3] = r3F;
rm[4] = r4F;
rm[5] = r5F;
rm[6] = r6F;
rm[7] = r7F;
rm[8] = r8F;
rm[9] = r9F;
rm[10] = r10F;
/*if(global.testAvailable)
{
 rm[11] = r11F;
}
else
{
 rm[11] = r11F_Demo;
}*/
rm[11] = r11F;
rm[12] = r12F;
rm[13] = r13F;
rm[14] = r14F;
rm[15] = r15F;
rm[16] = r16F;
rm[17] = r17F;
rm[18] = r18F;
rm[19] = rFinalBoss;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(img_index &lt; 3)
    img_index += 1;
else
    img_index = 0;
alarm[0] = 10;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(global.currentFloor == 10 &amp;&amp; room != r10F &amp;&amp; room != r10F_TE)
{
    global.isExtra = true;
}
else
{
    global.isExtra = false;
}
if(global.maxFloor &lt; global.currentFloor)
{
    global.maxFloor = global.currentFloor;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(keyboard_check_pressed(global.menubutton))
{
    if(instance_exists(obj_finalCorridorWhite) || instance_exists(obj_dirtyDealMenu))
    {
        exit;
    }
    if(deactivated == 0)
    {
        if instance_exists(player)
        {
            if(player.frozen)
            {
                exit;
            }
        }
        index = 1;
        count = 0;
        mPage = 0;
        aPage = 0;
        deactivated = 1;
        event_user(0);
        with(obj_monsterPrototype)
        {
            if(!sample &amp;&amp; ds_list_find_index(other.list, object_index) == -1)
            {
                ds_list_add(other.list, object_index);
                other.atk[other.count] = atk;
                other.def[other.count] = def;
                other.ex[other.count] = ex;
                other.spr[other.count] = sprite_index;
                other.name[other.count] = name;
                other.hp[other.count] = hp;
                other.status[other.count] = status;
                other.isBoss[other.count] = isBoss;
                other.count += 1;
            }
        }
        pauseImg = sprite_create_from_surface(application_surface, 0, 0, 800, 608, false, false, 0, 0);
        instance_deactivate_all(1);
        instance_activate_object(world);
        for(i = 0; i &lt; maxSpecial; i+= 1)
        {
            if(global.special[i])
            {
                specialSelection = i;
                exit;
            }
        }
    }
    else
    {
        initialized = false;
        initialized1 = false;
        if(surface_exists(surf1))
        {
            surface_free(surf1);
        }
        surf1_hindex = 0;
        if(surface_exists(surf2))
        {
            surface_free(surf2);
        }
        surf2_hindex = 0;
        pauseImg = noone;
        instance_activate_all();
        deactivated = 0;
        ds_list_clear(list);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(deactivated)
{
    listened = false;
    with(obj_button)
    {
        if(listen == 1)
        {
            listened = true;
        }
    }  
    if(!listened)
    {  
    if(keyboard_check_pressed(global.upbutton))
    {
        surf1_hindex = 0;
        surf2_hindex = 0;
        audio_playsound(snd_wallum);
        if(index == 0)
        {
            index = maxIndex;
        }
        else
        {
            index -= 1;
        }
        isRefresh = true;
    }
    else if(keyboard_check_pressed(global.downbutton))
    {
        surf1_hindex = 0;
        surf2_hindex = 0;
        audio_playsound(snd_wallum);
        if(index == maxIndex)
        {
            index = 0;
        }
        else
        {
            index += 1;
        }
        isRefresh = true;
    }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(deactivated &amp;&amp; index == 1)
{
    if(ppAvailable &amp;&amp; abs(mouse_x - view_xview[0] - ppx) &lt; 83 &amp;&amp; abs(mouse_y - view_yview[0] - pageY) &lt; 22)
    {
        if(mouse_check_button_pressed(mb_left))
        {
            mIndex -= 1;
        }
    }
    
    if(pnAvailable &amp;&amp; abs(mouse_x - view_xview[0] - pnx) &lt; 83 &amp;&amp; abs(mouse_y - view_yview[0] - pageY) &lt; 22)
    {
        if(mouse_check_button_pressed(mb_left))
        {
            mIndex += 1;
        }
    }
    /*if(surf1_hindex + 592 &lt; surf1_height)
    {
        if(mouse_x &gt; 200 &amp;&amp; mouse_x &lt; 800 &amp;&amp; mouse_y &gt; 576 &amp;&amp; mouse_y &lt;= 608)
        {
            surf1_hindex += 4;
        }
    }
    if(surf1_hindex &gt; 0)
    {
        if(mouse_x &gt; 200 &amp;&amp; mouse_x &lt; 800 &amp;&amp; mouse_y &gt;= 0 &amp;&amp; mouse_y &lt; 32)
        {
            surf1_hindex -= 4;
        }
    }
    else
    {
        surf1_hindex = 0;
    }*/
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(deactivated &amp;&amp; index == 2)
{
    if(keyboard_check_pressed(global.leftbutton))
    {
        if(specialSelection == 0)
        {
            specialSelection = maxSpecial - 1;
        }
        else
        {
            specialSelection -= 1;
        }
        audio_playsound(snd_wallum);
    }
    else if(keyboard_check_pressed(global.rightbutton))
    {
        if(specialSelection == maxSpecial - 1)
        {
            specialSelection = 0;
        }
        else
        {
            specialSelection += 1;
        }
        audio_playsound(snd_wallum);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(deactivated &amp;&amp; index == 4)
{
    if(ppAvailable &amp;&amp; abs(mouse_x - view_xview[0] - ppx) &lt; 83 &amp;&amp; abs(mouse_y - view_yview[0] - pageY - 8) &lt; 22)
    {
        if(mouse_check_button_pressed(mb_left))
        {
            aIndex -= 1;
        }
    }
    
    if(pnAvailable &amp;&amp; abs(mouse_x - view_xview[0] - pnx) &lt; 83 &amp;&amp; abs(mouse_y - view_yview[0] - pageY - 8) &lt; 22)
    {
        if(mouse_check_button_pressed(mb_left))
        {
            aIndex += 1;
        }
    }
   /*if(surf2_hindex + 592 &lt; surf2_height)
    {
        if(mouse_x &gt; 200 &amp;&amp; mouse_x &lt; 800 &amp;&amp; mouse_y &gt; 576 &amp;&amp; mouse_y &lt;= 608)
        {
            surf2_hindex += 4;
        }
    }
    if(surf2_hindex &gt; 0)
    {
        if(mouse_x &gt; 200 &amp;&amp; mouse_x &lt; 800 &amp;&amp; mouse_y &gt;= 0 &amp;&amp; mouse_y &lt; 32)
        {
            surf2_hindex -= 4;
        }
    }
    else
    {
        surf2_hindex = 0;
    }*/
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(deactivated &amp;&amp; index == 5)
{
    backupSelection = -1;
    backupColor1 = c_white;
    backupColor2 = c_white;
    if(abs(mouse_x - 500) &lt; view_xview[0] + 217)
    {
        if(abs(mouse_y - 290) &lt; view_yview[0] + 71)
        {
            backupSelection = 0;
            backupColor1 = c_yellow;
        }
        else if(abs(mouse_y - 470) &lt; view_yview[0] + 71)
        {
            backupSelection = 1;
            backupColor2 = c_yellow;
        }
    }
    
    if(backupSelection != -1)
    {
        if(mouse_check_button_pressed(mb_left))
        {
            
            if(backupSelection == 0)
            {
                fName = get_string("Please Enter a Backup Name:", "");
                if(fName == "")
                {
                    show_message("Back Name Cannot be Empty!");
                    exit;
                }
                if(!directory_exists(working_directory + "/BackUps"))
                {
                    directory_create(working_directory + "/BackUps");
                }
                nSaveName = working_directory + "/BackUps/" + fName + "(S)";
                nDeathName = working_directory + "/BackUps/" + fName + "(D)";
                nExtraName = working_directory + "/BackUps/" + fName + "(E)";
                //nAchievementName = working_directory + "/BackUps/" + fName + "(A)";
                if(file_exists(nSaveName))
                {
                    file_delete(nSaveName);
                }
                if(file_exists(nDeathName))
                {
                    file_delete(nDeathName);
                }
                if(file_exists(nExtraName))
                {
                    file_delete(nExtraName);
                }
                //if(file_exists(nAchievementName))
                //{
                //    file_delete(nAchievementName);
                //}
                file_copy("save1", nSaveName);
                file_copy("DeathTime", nDeathName);
                if(file_exists("extraSave"))
                {
                    file_copy("extraSave", nExtraName);
                }
                //file_copy("achievements", nAchievementName);
                if(file_exists(nSaveName))
                {
                    show_message("Backup Created");
                    if(!global.achievements[9])
                    {
                        ch = instance_create(0,608,obj_achievements);
                        ch.index = 9;
                        global.achievements[9] = true;
                    }
                }
                else
                {
                    show_message("Backup creation failed. Check if you have special characters included in your file name like '&lt;&gt;/\|:*?'");
                }
            }
            else if(backupSelection == 1)
            {
                    
                fName = get_open_filename('NAMTG Saves|*(S)',working_directory + "\BackUps");
                if(!file_exists(fName))
                {
                    if(file_exists(fName + '(S)'))
                    {
                        fName += '(S)';
                    }
                    else
                    {
                        show_message("File not exists.");
                        exit;
                    }
                }
                fName = filename_name(fName);
                jName = fName;
                fName = string_copy(fName,0, string_length(fName) - 3);
                if(fName + '(S)' != jName)
                {
                    show_message("Cannot find the NAMTG save file with the filename you input.");
                    exit;
                }                             
                nSaveName = working_directory + "/BackUps/" + fName + "(S)";
                nDeathName = working_directory + "/BackUps/" + fName + "(D)";
                nExtraName = working_directory + "/BackUps/" + fName + "(E)";
                //nAchievementName = working_directory + "/BackUps/" + fName + "(A)";
                isLoad = false;
                if(!file_exists(nSaveName))
                {
                    show_message("Failed to find specific backup.");
                }
                else
                {
                    isLoad = true;
                    file_delete("save1");
                    file_copy(nSaveName, "save1");
                }
                if(file_exists(nDeathName) &amp;&amp; isLoad)
                {
                    file_delete("DeathTime");
                    file_copy(nDeathName, "DeathTime");
                    if(file_exists(nExtraName))
                    {
                        file_copy(nExtraName, "extraSave");
                    }
                    else
                    {
                        file_delete("extraSave");
                    }
                }
                //if(file_exists(nAchievementName) &amp;&amp; isLoad)
                //{
                //    file_delete("achievements");
                //    file_copy(nAchievementName, "achievements");
                //}
                if(isLoad)
                {
                    loadGame();
                    loadDeathTime();
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(deactivated &amp;&amp; index == 6)
{
    mouseIn = false;
    for(p = 0; p &lt; 5; p += 1)
    {
        if(mouse_x &gt; (view_xview[0] + 250) &amp;&amp; mouse_x &lt; (view_xview[0] + 750) &amp;&amp; mouse_y &gt; (view_yview[0] + 200 + p * 60) &amp;&amp; mouse_y &lt; (view_yview[0] + 200 + p * 60 + 50))
        {
            cheatSelection = p + 1;
            mouseIn = true;
        }
    }
    if(!mouseIn)
    {
        cheatSelection = 0;
    }
    
    if(cheatSelection &gt; 0 &amp;&amp; mouse_check_button_pressed(mb_left))
    {
        if(cheatSelection == 1)
        {
            global.yellowKeyNum += 1;
        }
        else if(cheatSelection == 2)
        {
            global.blueKeyNum += 1;
        }
        else if(cheatSelection == 3)
        {
            global.redKeyNum += 1;
        }
        else if(cheatSelection == 4)
        {
            global.greenKeyNum += 1;
        }
        else if(cheatSelection == 5)
        {
            global.ironKeyNum += 1;
        }
        global.isCheated = true;
        audio_playsound(snditem);
        if(!global.achievements[10])
        {
            ch = instance_create(0,608,obj_achievements);
            ch.index = 10;
            global.achievements[10] = true;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Floor transmitter
if instance_exists(player)
{
    if(player.frozen)
    {
        exit;
    }
}


if(global.special[0] &amp;&amp; instance_exists(player))
{
    if(keyboard_check_pressed(global.transmissionbutton))
    {
        if(room != rTaisa &amp;&amp; room != rSpacePortal)
        {
            if(global.isExtra || instance_exists(obj_spaceController))
            {
                show_message("You cannot use Storey Teleporter here.");
                exit;
            }
        }
        if(global.currentFloor == 10)
        {
            if(room != r10F &amp;&amp; room != r10F_TE)
            {
                show_message("You cannot use Storey Teleporter here.");
                exit;
            }
        }
        if(room == rBurning || room == rFreezing || room == rRenalTreasure || room == rFairyTail)
        {
            show_message("You cannot use Storey Teleporter here.");
            exit;
        }
        if(global.currentFloor == -2)
        {
            show_message("You cannot use it at this floor!");
            exit;       
        }
        //fl = get_integer("Provide a floor to teleport:", global.currentFloor);
        fl = get_integer("Provide a floor to teleport:", "");
        if(global.carryPrincess)
        {
            message_add("Storey Teleporter : Request rejected. Princess is too heavy!");
            message_add("Kid : .........");
            exit;
        }
        
        if(fl != global.currentFloor)
        {
            if(fl &gt; global.maxFloor || fl &lt; global.minFloor)
            {
                show_message("You cannot go to specified floor at current time!");
            }
            else
            {
                if(deactivated)
                {
                    instance_activate_object(player);
                }
                if(fl &lt; 0)
                {
                    if(!global.story[21])
                    {
                        show_message("Basement flying is not supported yet!");
                    }
                    else
                    {
                        if(fl == -1)
                        {
                            if(global.currentFloor == -2)
                            {
                                player.x = 1728 + 17;
                                player.y = 288 + 23;                                     
                            }
                            else
                            {
                                player.x = 96 + 17;
                                player.y = 32 + 23;      
                            }
                            //transition_kind = 21;
                            //transition_steps = 100;
                            room_goto(rB1F);
                        }
                        else if(fl == -2)
                        {
                            player.x = 32 + 17;
                            player.y = 0 + 23; 
                            //transition_kind = 21;
                            //transition_steps = 100;
                            room_goto(rB2F);
                        }
                    }
                }
                else if(fl &lt; global.currentFloor)
                {
                    if(fl == 13)
                    {
                        if(!global.story[28])
                        {
                            show_message("You need to reach 13F once before you can teleport there.");
                            exit;
                        }
                    }
                    player.x = rx[fl,1];
                    player.y = ry[fl,1];      
                    // Transition move down
                    //transition_kind = 17;            
                }
                else
                {
                    if(fl == 13)
                    {
                        if(!global.story[28])
                        {
                            show_message("You need to reach 13F once before you can teleport there.");
                            exit;
                        }
                    }
                    player.x = rx[fl,0];
                    player.y = ry[fl,0];
                    // Transition move up
                    //transition_kind = 16; 
                }
                
                if(fl &gt;= 0)
                {
                    global.currentFloor = fl;
                    //transition_steps = 50;
                    room_goto(rm[fl]);
                }
            }
        }   
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_exists(player)
{
    if(player.frozen)
    {
        exit;
    }
    if(!deactivated &amp;&amp; !global.isExtra)
    {
        if(global.upstairsWingNum &gt; 0)
        {
            if(keyboard_check_pressed(global.upstairsbutton))
            {
                if(global.isExtra)
                {
                    show_message("You cannot use Upstairs Wing here.");
                    exit;
                }
                if(global.currentFloor == 10)
                {
                    if(room != r10F &amp;&amp; room != r10F_TE)
                    {
                        show_message("You cannot use Upstairs Wing here.");
                        exit;
                    }
                }
                if(room == rBurning || room == rFreezing || room == rRenalTreasure || room == rFairyTail)
                {
                    show_message("You cannot use Upstairs Wing here.");
                    exit;
                }
                fly = show_question("Are you sure to use the Upstairs Wing?");
                if(fly)
                {
                    if(global.currentFloor == 10)
                    {
                        if(!global.story[25])
                        {
                            message_add("You've already reached the highest floor of the tower.");   
                        }            
                    }
                    else if(global.currentFloor &gt;= 14)
                    {
                        message_add("You cannot use upstairs wing at current floor.");   
                    }
                    else if(global.currentFloor &gt;= -1)
                    {
                        flr = global.currentFloor;
                        global.upstairsWingNum -= 1;
                        global.currentFloor += 1;
                        maxfloor = global.maxFloor;
                        minfloor = global.minFloor;
                        if(global.currentFloor &gt; global.maxFloor)
                        {
                            global.maxFloor = global.currentFloor;
                        }
                        if(global.currentFloor &lt; global.minFloor)
                        {
                            global.minFloor = global.currentFloor;
                        }
                        //transition_kind = 16;
                        player.x = rx[flr + 1, 0];
                        player.y = ry[flr + 1, 0];
                        room_goto(rm[flr + 1]);
                    }
                    else
                    {
                        flr = global.currentFloor;
                        global.upstairsWingNum -= 1;
                        global.currentFloor += 1;
                        maxfloor = global.maxFloor;
                        minfloor = global.minFloor;
                        if(global.currentFloor &gt; global.maxFloor)
                        {
                            global.maxFloor = global.currentFloor;
                        }
                        if(global.currentFloor &lt; global.minFloor)
                        {
                            global.minFloor = global.currentFloor;
                        }
                        //transition_kind = 21;
                        //transition_steps = 150;
                        player.x = 1728 + 17;
                        player.y = 288 + 23;
                        room_goto(rB1F);
                    }
                }
            }
        }
        else if(keyboard_check_pressed(global.upstairsbutton))
        {
            show_message("You don't have a Upstairs Wing at current time.");
        }
        if(global.downstairsWingNum &gt; 0)
        {
            if(keyboard_check_pressed(global.downstairsbutton))
            {
                if(global.isExtra)
                {
                    show_message("You cannot use Downstairs Wing here.");
                    exit;
                }
                if(global.currentFloor == 10)
                {
                    if(room != r10F &amp;&amp; room != r10F_TE)
                    {
                        show_message("You cannot use Downstairs Wing here.");
                        exit;
                    }
                }
                if(room == rBurning || room == rFreezing || room == rRenalTreasure || room == rFairyTail)
                {
                    show_message("You cannot use Downstairs Wing here.");
                    exit;
                }
                fly = show_question("Are you sure to use the Downstairs Wing?");
                if(fly)
                {
                    if(global.currentFloor &lt;= 0)
                    {
                        if(!global.story[15])
                        {
                            message_add("There's no baseroom detected yet.");   
                        }
                        else
                        {
                            flr = global.currentFloor;
                            if(flr &lt;= -2)
                            {
                                show_message("You've already at the bottom of the tower.");
                                exit;
                            }
                            global.downstairsWingNum -= 1;
                            global.currentFloor -= 1;
                            maxfloor = global.maxFloor;
                            minfloor = global.minFloor;
                            if(global.currentFloor &gt; global.maxFloor)
                            {
                                global.maxFloor = global.currentFloor;
                            }
                            if(global.currentFloor &lt; global.minFloor)
                            {
                                global.minFloor = global.currentFloor;
                            }
                            //transition_kind = 21;
                            //transition_steps = 150;
                            if(flr == 0)
                            {
                                player.x = 96 + 17;
                                player.y = 32 + 23;
                                room_goto(rB1F);
                            }
                            else if(flr == -1)
                            {
                                player.x = 32 + 17;
                                player.y = 0 + 23;
                                room_goto(rB2F);
                            }
                        }
                    }
                    else if(global.currentFloor == 14)
                    {
                        message_add("You cannot use downstairs wing at current floor.");   
                    }
                    else
                    {
                        flr = global.currentFloor;
                        global.downstairsWingNum -= 1;
                        global.currentFloor -= 1;
                        maxfloor = global.maxFloor;
                        minfloor = global.minFloor;
                        if(global.currentFloor &gt; global.maxFloor)
                        {
                            global.maxFloor = global.currentFloor;
                        }
                        if(global.currentFloor &lt; global.minFloor)
                        {
                            global.minFloor = global.currentFloor;
                        }
                        //transition_kind = 17;
                        player.x = rx[flr - 1, 1];
                        player.y = ry[flr - 1, 1];
                        room_goto(rm[flr - 1]);
                    }
                }
            }
        }
        else if(keyboard_check_pressed(global.downstairsbutton))
        {
            show_message("You don't have a Downstairs Wing at current time.");
        }
        if(global.centralWingNum &gt; 0)
        {
            if(keyboard_check_pressed(global.centralflyingbutton))
            {
                if(global.isExtra || instance_exists(obj_spaceController))
                {
                    show_message("You cannot use Central Symmetry Flying Wing here.");
                    exit;
                }
                if(global.currentFloor == 10)
                {
                    if(room != r10F &amp;&amp; room != r10F_TE)
                    {
                        show_message("You cannot use Central Symmetry Flying Wing here.");
                        exit;
                    }
                }
                if(room == rBurning || room == rFreezing || room == rRenalTreasure || room == rFairyTail || room == rFinalRoom || room == r16F || room == r17F)
                {
                    show_message("You cannot use Central Symmetry Flying Wing here.");
                    exit;
                }
                if(global.currentFloor &lt; 0 || (global.currentFloor &gt;= 14 &amp;&amp; global.currentFloor != 15) || room == rEvilDragon)
                {
                    show_message("Central flying is not available in this floor.");
                    exit;
                }
                fly = show_question("Are you sure to use the Central Symmetry Flying Wing?");
                if(fly)
                {
                    if(room == rSecret1 || room == rSecret3)
                    {
                        finalX = 800 - player.x;
                        finalY = 608 - player.y;
                    }
                    else if(room == rSecret2)
                    {
                        finalX = 800 - player.x;
                        finalY = 32 + 576 - (player.y - 32);
                    }
                    else
                    {
                        if(player.x &lt; 192)
                        {
                            message_add("You are not at a valid position of the current floor!");
                            exit;
                        }
                        else
                        {
                            finalX = 192 + 608 - (player.x - 192);
                            finalY = 608 - player.y;
                        }
                    }
                    
                    finalY += (23 - (32 - 23)) - (32 - 23);
                    with(player)
                    {
                        if(place_meeting(other.finalX, other.finalY, block))
                        {
                            other.isFlyAvailable = false;
                        }
                        else if(place_meeting(other.finalX, other.finalY, obj_specialAreaTeleportBlock))
                        {
                            other.isFlyAvailable = false;
                            other.isSpecialZone = true;
                        }
                        else
                        {
                            other.isFlyAvailable = true;
                        }
                    }
                    if(isFlyAvailable)
                    {
                        player.x = finalX;
                        player.y = finalY;
                        player.image_xscale *= -1;
                        global.centralWingNum -= 1;
                    }
                    else
                    {
                        if(isSpecialZone)
                        {
                            show_message("You cannot teleport to the place that is within a secret zone. Press 'M' to toggle the target mark.");
                        }
                        else
                        {
                            show_message("You cannot teleport to the place that exists the block. Press 'M' to toggle the target mark.");
                        }
                    }
                }
            }       
        }
        else if(keyboard_check_pressed(global.centralflyingbutton))
        {
            show_message("You don't have a Central Symmetry Flying Wing at current time.");
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_exists(player)
{
if(player.frozen)
{
    exit;
}
}
if(!deactivated  &amp;&amp; instance_exists(player) &amp;&amp; !global.isExtra)
{
    if(keyboard_check_pressed(global.centralflyingposbutton))
    {
        if(global.isExtra)
        {
            exit;
        }
        if(room == rB1F || room == rB2F)
        {
            show_message("Central flying is not available in this floor.")
        }
        else
        {
            if(drawTeleportTarget)
            {
                drawTeleportTarget = false;
            }
            else
            {
                drawTeleportTarget = true;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!deactivated &amp;&amp; instance_exists(player))
{
    if(mouse_check_button_pressed(mb_left))
    {
        if(instance_exists(obj_dynamiteInUse))
        {
            with(obj_dynamiteInUse)
            {
                if(!global.dynamiteTutorial &amp;&amp; room == r6F)
                {
                    if(!instance_place(x,y,obj_monsterPrototype))
                    {
                        message_add("Gay DW(Merchant): Hey! there's no monster there! Target the small slime!");
                    }
                    else if(target.object_index != obj_slime_s)
                    {
                        message_add("Gay DW(Merchant): Hey! I said target the small slime! Don't try fool with me!");
                    }
                    else
                    {
                        boom = instance_create(target.x + 16, target.y + 32, obj_dynamiteExplosion);
                        boom.target = target;
                        with(obj_dynamiteInUse)
                        {
                            instance_destroy();
                        }
                    }
                }
                else
                {
                    if(!instance_place(x,y,obj_monsterPrototype))
                    {
                        message_add("No monster targeted.");
                    }
                    else if(target.status == 2)
                    {
                        message_add("The monster is too strong that you cannot use the dynamite to kill it.");
                    }
                    else if(target.isBoss)
                    {
                        message_add("You cannot use dynamite to kill a boss level monster.");
                    }
                    else
                    {
                        boom = instance_create(target.x + 16, target.y + 32, obj_dynamiteExplosion);
                        boom.target = target;
                        with(obj_dynamiteInUse)
                        {
                            instance_destroy();
                        }
                    }
                }
            }
        }
    }
    if(mouse_check_button_pressed(mb_right) &amp;&amp; instance_exists(obj_dynamiteInUse) &amp;&amp; (global.dynamiteTutorial || room != r6F))
    {
        with(obj_dynamiteInUse)
        {
            cancelled = true;
            instance_destroy();
        }
        player.frozen = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_exists(player)
{
if(!deactivated)
{
    if(keyboard_check_pressed(global.dynamiteButton))
    {
        if(!instance_exists(obj_dynamiteInUse))
        {
            if(global.dynamiteNum &gt; 0)
            {
                player.frozen = true;
                instance_create(mouse_x,mouse_y,obj_dynamiteInUse);
            }
            else
            {
                show_message("You don't have a dynamite.");
            }
        }
        else
        {
            if(show_question("You already have the dynamite in hand, cancel the usage?"))
            {
                with(obj_dynamiteInUse)
                {
                    cancelled = true;
                    instance_destroy();
                }
                player.frozen = false;
            }
        }
    }
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var monsterPercentage, specialPercentage, totalMonsterCount, specialCount, specialComplete, spaceItems, clearItemCount, clearItemComplete, storyCount, storyComplete, floorCount, floorComplete,
    mKilled, achCount, extraBubbleStar, extraJKStar, spaceItems, challengeCount, cChallenge;

monsterPercentage = 0.4;
achievementPercentage = 0.25;
specialPercentage = 0.15;
extraPercentage = 0.2;

mKilled = 0;
achCount = 0;
extraBubbleStar = 0;
extraJKStar = 0;
totalMonsterCount = 317;
specialCount = 0;
specialComplete = 0;
spaceItems = 0;
clearItemCount = 0;
clearItemComplete = 0;
storyCount = 4; 
storyComplete = 0; 
storyPer = 0;
floorCount = 6;
floorComplete = 0;

for(var i = 0; i &lt; 319; i += 1)
{
    /*if(i != 4 &amp;&amp; i != 144 &amp;&amp; i != 156)
    {
        if(global.monsters[i])
        {
            mKilled += 1;
        }
        totalMonsterCount += 1;
    }*/
    mKilled += global.monsters[i];
}

//mPer monster percentage  50% story
mPer = mKilled / totalMonsterCount;


//storyList 50% story
for(var i = 0; i &lt; 19; i += 1)
{
    if(global.special[i])
    {
        specialComplete += 1;
    }
    specialCount += 1;
}

for(var i = 0; i &lt; 10; i += 1)
{
    if(global.clearItem[i])
    {
        clearItemComplete += 1;
    }
    clearItemCount += 1;
}

if(global.story[25])
{
    storyComplete += 1;
}
if(global.story[32])
{
    storyComplete += 1; 
}
if(global.story[38])
{
    storyComplete += 1; 
}
if(global.monsters[317])
{
    storyComplete += 1; 
}

storyPer = mPer * 0.5 + (specialComplete + clearItemComplete + storyComplete)/(specialCount + clearItemCount + storyCount) * 0.5;

for(i = 0; i &lt; 106; i += 1)
{
    if(global.achievements[i])
    {
        achCount += 1;
    }
}

//aPer achievement percentage
aPer = achCount / 106;

if(abs(1-aPer) &lt; 0.001)
{
    aPer = 1;
}


sPer = (specialComplete + clearItemComplete)/(specialCount + clearItemCount);

for(var i = 0; i &lt; 10; i += 1)
{
 extraBubbleStar += global.bubbleStageStar[i];
}

for(var i = 0; i &lt; 10; i += 1)
{
 extraJKStar += global.ExtraJkStar[i];
}

for(var i = 0; i &lt; 10; i +=1)
{
 spaceItems += global.SpaceItems[i];
}

if(global.hpUp[196])
{
    floorComplete += 1;
}
if(global.hpUp[200])
{
    floorComplete += 1;
}
if(global.hpUp[202])
{
    floorComplete += 1;
}
if(global.blueKeys[22])
{
    floorComplete += 1;
}
if(global.hpUp[204])
{
    floorComplete += 1;
}
if(global.defUp[61])
{
    floorComplete += 1;
}

oPer =  extraBubbleStar / 30 * 0.225
        + extraJKStar / 30 * 0.225
        + floorComplete/floorCount*0.225 
        + RangeClamp(global.mmmHighScore/1200,0,1)*0.225
        + spaceItems / 10 * 0.1;

challengeCount = 0; 
cChallenge = 0; 
for(var i=0;i&lt;9;i+=1)
{
    challengeCount += global.challengeSets[i];
}
for(var i = 0; i &lt; 3; i+=1)
{
    cChallenge += global.CCItem[i];
}
cPer = challengeCount/9 * 0.7 + cChallenge/3*0.3;
if(abs(1-cPer) &lt; 0.001)
{
    cPer = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_list_destroy(list);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Unused
/*if(deactivated)
{
if(!initialized1 &amp;&amp; index == 4)
{
    initialized = false;
    if(surface_exists(surf1))
    {
        surface_free(surf1);
    }
    if(surface_exists(surf2))
    {
        surface_free(surf2);
    }
    surf1_hindex = 0;
    surf2_hindex = 0;
    if(!surface_exists(surf2))
    {
        surf2_height = 90 * 10;
        surf2 = surface_create(600, surf2_height);
        surface_set_target(surf2);
        draw_set_halign(fa_left);
        draw_set_valign(fa_top);
        for(i = 0; i &lt; 50; i+=1)
        {
            aX = 0;
            aY = 90 * i;
            infoGap = 120;
            draw_set_alpha(1);
            draw_set_color(c_white);
            
            
            if(global.achievements[i])
            {
                draw_sprite_ext(global.achievementSpr[i], 0, aX, aY, 0.375, 0.375, 0, c_white, 1);
                draw_set_font(font16);
                draw_text(aX + infoGap, aY, global.achievementName[i]);
                draw_set_font(fontBasicInfo);
                draw_text_ext(aX + infoGap, aY + 24, global.achievementDescription[i], 12, 568 - infoGap);
            }
            else
            {
                draw_sprite_ext(spr_unknown, 0, aX, aY, 0.375, 0.375, 0, c_white, 1);
                draw_set_font(font16);
                draw_text(aX + infoGap, aY, "???");
                draw_set_font(fontBasicInfo);
                draw_text(aX + infoGap, aY + 24, "???");
            }
        }
        surface_reset_target();
        initialized1 = true;
    }
}

if(!initialized &amp;&amp; index == 1)
{
    initialized1 = false;
    if(surface_exists(surf1))
    {
        surface_free(surf1);
    }
    if(surface_exists(surf2))
    {
        surface_free(surf2);
    }
    surf1_hindex = 0;
    surf2_hindex = 0;
    if(count &gt; 0 &amp;&amp; !surface_exists(surf1))
    {
        surf1_height = 80 * count;
        surf1 = surface_create(600, surf1_height);
        surface_set_target(surf1);
        draw_set_halign(fa_left);
        draw_set_valign(fa_top);
        for(i = 0; i &lt; count; i+=1)
        {
            beginX = 0;
            beginY = 80 * i;
            statusGap = 352;
            draw_set_alpha(1);
            draw_set_color(c_white);
            draw_set_font(font_monsterinfo);
            draw_rectangle(beginX,beginY,592,beginY + 72, true);
            draw_text(beginX + 16, beginY + 6, name[i]);
            if(isBoss[i])
            {
                draw_sprite_ext(spr[i], img_index, beginX + 24, beginY + 20, .75, .75, 0, c_white, 1);
            }
            else
            {
                draw_sprite(spr[i], img_index, beginX + 32, beginY + 20);
            }
            draw_text(beginX + statusGap, beginY + 6, "Status :")
           
            draw_set_font(font12);
            draw_text(beginX + 88, beginY + 20, "Attack :");
            draw_text(beginX + 168, beginY + 20, atk[i]);
            draw_text(beginX + 216, beginY + 20, "Defense :");
            draw_text(beginX + 296, beginY + 20, def[i]);
            draw_text(beginX + 88, beginY + 44, "HP :");
            for(l = 0; l &lt; floor(hp[i] / 100); l+=1)
            {
                draw_sprite_ext(spr_hp,0,beginX + 128 + 24 * l, beginY + 38, .75, .75,0,c_white,1);
            }
            
            for(k = 0; k &lt; floor((hp[i] mod 100) / 10); k+=1)
            {
                draw_sprite_ext(spr_heart10,0,beginX + 128 + floor(hp[i] / 100) * 24 + 20 * k, beginY + 48, 1, 1,0,c_white,1);
            }
            for(j = 0; j &lt; (hp[i] mod 10); j+=1)
            {
                draw_sprite_ext(spr_smallHeart,0,beginX + 128 + floor(hp[i] / 100) * 24 + 20 * floor((hp[i] mod 100) / 10) + 14 * j, beginY + 52, 1, 1,0,c_white,1);
            }
            draw_set_color(make_color_rgb(0,56,0));
            if(status[i] == 0)
            {
                draw_set_alpha(1);
                draw_text(beginX + statusGap + 8, beginY + 44, "Safe!")
            }
            else
            {
                draw_set_alpha(.25);
            }   
            draw_circle(beginX + statusGap + 16, beginY + 32, 8, false);
        
            draw_set_color(c_yellow);
            if(status[i] == 1)
            {
                draw_set_alpha(1);
                draw_text(beginX + statusGap + 8, beginY + 44, "Battle!")
            }
            else
            {
                draw_set_alpha(.25);
            }   
            draw_circle(beginX + statusGap + 48, beginY + 32, 8, false);
        
            draw_set_color(c_red);
            if(status[i] == 2)
            {
                draw_set_alpha(1);
                draw_text(beginX + statusGap + 8, beginY + 44, "Invincible!")
            }
            else
            {
                draw_set_alpha(.25);
            }   
            draw_circle(beginX + statusGap + 80, beginY + 32, 8, false);
            
        }
        surface_reset_target();
        initialized = true;
    }
}
}
else
{
    if(surf1 != 0 &amp;&amp; surface_exists(surf1))
    {
        surface_free(surf1);
    }
    if(surf2 != 0 &amp;&amp; surface_exists(surf2))
    {
        surface_free(surf2);
    }
    initialized = false;
    initialized1 = false;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(deactivated)
{
    xx = view_xview[0];
    yy = view_yview[0];
    draw_sprite(pauseImg,0,0,0);
    draw_set_color(make_color_rgb(0,128,0));
    draw_set_alpha(.8);
    draw_rectangle(0,0, xx + 800, yy + 608, false);

    draw_set_color(c_white);
    draw_set_alpha(.8);
    draw_roundrect(xx + 8, yy + 8, xx + 184, yy + 360, true);

    draw_arrow(xx + 15, yy + 32 + 48 * index + 12, xx +  27, yy + 32 + 48 * index + 12, 20);
    draw_set_font(font_leftmenu);
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
    draw_text(xx + 32,yy + 32, "Basics");
    draw_text(xx + 32,yy + 32 + 48 * 1, "Monsters");
    draw_text(xx + 32,yy + 32 + 48 * 2, "Items");
    draw_text(xx + 32,yy + 32 + 48 * 3, "Controls");
    draw_text(xx + 32,yy + 32 + 48 * 4, "Achievements");
    draw_text(xx + 32,yy + 32 + 48 * 5, "BackUps");
    draw_text(xx + 32,yy + 32 + 48 * 6, "I Wanna Cheat");
    draw_line(xx + 192, yy + 0, xx + 192,yy + 608);
    
    py = 410;
    draw_text(xx + 16, yy + py, "Death :")
    draw_text(xx + 16, yy + py + 80, "Total Time :")
    draw_set_halign(fa_right)
    draw_text(xx + 176, yy + py + 24, global.death[global.savenum]);
    draw_text(xx + 176, yy + py + 80 + 24, string(global.hour[global.savenum])+":" +string(global.muni[global.savenum])+":"+string(global.sec[global.savenum])+"."+string(round(global.msec[global.savenum])));
    draw_set_halign(fa_left);
    
    if(index == 0) //basic info
    {
        with(obj_menuObjPrototype)
        {
            instance_destroy();
        }
        lvlRequired = global.levelRequired[global.currentLevel];
        currentExp = global.levelExp;
        draw_set_font(font16);
        if(global.currentLevel == 11)
        {
            draw_text(xx + 224, yy + 24, "Level MAX");
            draw_text(xx + 224, yy + 96, "Next Level Bonus:     N/A");
        }
        else
        {
            draw_text(xx + 224, yy + 24, "Level " + string(global.currentLevel));
            draw_text(xx + 224, yy + 96, "Next Level Bonus:");
        }
        
        draw_sprite(spr_expBar, 0, xx + 224, yy + 48);
        draw_sprite_part_ext(spr_expBar,1, 0,0, currentExp * 400 / lvlRequired, 37,xx + 224, yy + 48, 1, 1, c_white, 1);
        draw_text(xx + 664, yy + 56, string(currentExp) + "/" + string(lvlRequired));
        
        bonusGap = 224 + 224;
        if(h_bns[global.currentLevel + 1] &gt; 0)
        {           
            draw_sprite_ext(spr_hpUp1, 0, xx + bonusGap, yy + 94,  0.8, 0.8, 0, c_white, 0.8);
            draw_text(xx + bonusGap + 32, yy + 96, "+" + string(h_bns[global.currentLevel + 1]));
            bonusGap += 96;
        }
        if(a_bns[global.currentLevel + 1] &gt; 0)
        {
            draw_sprite_ext(spr_attUp1, 0, xx + bonusGap, yy + 94,  0.8, 0.8, 0, c_white, 0.8);
            draw_text(xx + bonusGap + 32, yy + 96, "+" + string(a_bns[global.currentLevel + 1]));
            bonusGap += 96;
        }
        if(d_bns[global.currentLevel + 1] &gt; 0)
        {
            draw_sprite_ext(spr_defUp1, 0, xx + bonusGap, yy + 94,  0.8, 0.8, 0, c_white, 0.8);
            draw_text(xx + bonusGap + 32, yy + 96, "+" + string(d_bns[global.currentLevel + 1]));         
            bonusGap += 96;
        }
        if(k1_bns[global.currentLevel + 1] &gt; 0)
        {
            draw_sprite_ext(spr_yellowKey, 0, xx + bonusGap, yy + 94,  0.8, 0.8, 0, c_white, 0.8);
            draw_text(xx + bonusGap + 32, yy + 96, "+" + string(k1_bns[global.currentLevel + 1]));         
            bonusGap += 96;
        }
        if(k2_bns[global.currentLevel + 1] &gt; 0)
        {
            draw_sprite_ext(spr_blueKey, 0, xx + bonusGap, yy + 94,  0.8, 0.8, 0, c_white, 0.8);
            draw_text(xx + bonusGap + 32, yy + 96, "+" + string(k2_bns[global.currentLevel + 1]));         
            bonusGap += 96;
        }
        if(k3_bns[global.currentLevel + 1] &gt; 0)
        {
            draw_sprite_ext(spr_redKey, 0, xx + bonusGap, yy + 94,  0.8, 0.8, 0, c_white, 0.8);
            draw_text(xx + bonusGap + 32, yy + 96, "+" + string(k3_bns[global.currentLevel + 1]));         
            bonusGap += 96;
        }
        if(k4_bns[global.currentLevel + 1] &gt; 0)
        {
            draw_sprite_ext(spr_greenKey, 0, xx + bonusGap, yy + 94,  0.8, 0.8, 0, c_white, 0.8);
            draw_text(xx + bonusGap + 32, yy + 96, "+" + string(k4_bns[global.currentLevel + 1]));         
            bonusGap += 96;
        }
        if(k5_bns[global.currentLevel + 1] &gt; 0)
        {
            draw_sprite_ext(spr_ironKey, 0, xx + bonusGap, yy + 94,  0.8, 0.8, 0, c_white, 0.8);
            draw_text(xx + bonusGap + 32, yy + 96, "+" + string(k5_bns[global.currentLevel + 1]));         
            bonusGap += 96;
        }
        sx0 = 450;
        sy0 = 224;
        /*for(k = 0; k &lt; floor(global.hp / 10); k+=1)
            {
                draw_sprite_ext(spr_heart10,0,xx + 250 + 20 * k, yy + sy0 - 50, 1, 1,0,c_white,1);
            }
            for(j = 0; j &lt; (global.hp mod 10); j+=1)
            {
                draw_sprite_ext(spr_smallHeart,0,xx + 250 + 20 * floor(global.hp / 10) + 14 * j, yy + sy0 - 50 + 4, 1, 1,0,c_white,1);
            }*/
        if(global.hp &gt;= 233)
        {
            draw_sprite_ext(spr_smallHeart,0,xx + 250, yy + sy0 - 50 + 4, 1, 1,0,c_white,1);
            draw_set_alpha(1);
            draw_set_color(c_white);
            draw_set_font(fontBasicInfoMini);
            draw_set_valign(fa_bottom);
            draw_set_halign(fa_left);
            draw_text(xx + 250 + 14, yy + sy0 - 50 + 4 + 10, " x " +string(global.hp));
        } 
        else
        {
            for(var l = 0; l &lt; floor(global.hp / 100); l+=1)
            {
                draw_sprite_ext(spr_hp,0,xx + 250 + 24 * l, yy + sy0 - 60, .75, .75,0,c_white,1);
            }
            
            for(var k = 0; k &lt; floor((global.hp mod 100) / 10); k+=1)
            {
                draw_sprite_ext(spr_heart10,0,xx + 250 + floor(global.hp / 100) * 24 + 20 * k, yy + sy0 - 50, 1, 1,0,c_white,1);
            }
            for(var j = 0; j &lt; (global.hp mod 10); j+=1)
            {
                draw_sprite_ext(spr_smallHeart,0,xx + 250 + floor(global.hp / 100) * 24 + 20 * floor((global.hp mod 100) / 10) + 14 * j, yy + sy0 - 50 + 4, 1, 1,0,c_white,1);
            }
        }
        draw_sprite_ext(sprPlayerIdle, img_index, xx + 350, yy + sy0 + 50, 5,5, 0, c_white, 1);
        
        if(global.clearItem[0])
        {
            draw_sprite(spr_specialkey_yellow,0, xx + 350 - 102, yy + sy0 + 50 - 48);
        }
        if(global.clearItem[1])
        {
            draw_sprite(spr_specialkey_red,0, xx + 350 - 102, yy + sy0 + 50);
        }
        if(global.clearItem[2])
        {
            draw_sprite(spr_specialkey_blue,0, xx + 350 + 60, yy + sy0 + 50 - 48);
        }
        if(global.clearItem[3])
        {
            draw_sprite(spr_specialkey_green,0, xx + 350 + 60, yy + sy0 + 50);
        }
        if(global.clearItem[4])
        {
            draw_sprite(spr_specialKey_black,0, xx + 350 - 140, yy + sy0 + 50 - 24);
        }
        if(global.clearItem[5])
        {
            draw_sprite(spr_specialKey_white,0, xx + 350 + 98, yy + sy0 + 50 - 24);
        }
        draw_set_font(font24);
        draw_set_halign(fa_left);
        draw_set_valign(fa_top);
        draw_text(xx + sx0 + 48, yy + sy0 - 8, "Attack : ")
        draw_text(xx + sx0 + 48 + 160, yy + sy0 - 8, global.attack);
        draw_text(xx + sx0 + 48, yy + sy0 + 64  - 8, "Defense : ")
        draw_text(xx + sx0 + 48 + 160, yy + sy0 + 64 - 8, global.defense);
        draw_set_color(c_silver);
        for(var i = 0; i &lt; 3; i += 1)
        {
            draw_rectangle(xx + sx0 + 48 + 36 * i, yy + sy0 + 120, xx + sx0 + 48 + 36 * i + 32, yy + sy0 + 120 + 32, true);
            if(global.special[i + 11])
            {
                draw_sprite(sSpr[i + 11], 0, xx + sx0 + 48 + 36 * i, yy + sy0 + 120);
            }
        }
        
        for(var i = 0; i &lt; 4; i += 1)
        {
            draw_rectangle(xx + sx0 + 168 + 36 * i, yy + sy0 + 120, xx + sx0 + 168 + 36 * i + 32, yy + sy0 + 120 + 32, true);
            if(global.clearItem[i + 6])
            {
                draw_sprite(spr_ultimateEnergy, i, xx + sx0 + 168 + 36 * i, yy + sy0 + 120);
            }
        }
        //draw_text(sx0, sy0 + 64 * 2, "HP : ")
        //draw_text(sx0 + 160, sy0 + 64 * 2, global.hp);
        draw_set_color(c_silver);
        for(var i = 0; i&lt;3; i+=1)
        {
            draw_rectangle(xx + 240 + 0 + 72 * i, yy + sy0 + 120, xx + 240 + 0 + 72 * i + 32, yy + sy0 + 120 + 32, true);
            draw_rectangle(xx + 240 + 0 + 72 * i + 36, yy + sy0 + 120, xx + 240 + 0 + 72 * i + 32 + 36, yy + sy0 + 120 + 32, true);
            if(global.swords[i])
            {
                draw_sprite(swordsSpr[i], 0, xx + 240 + 0 + 72 * i, yy + sy0 + 120);
            }
            if(global.shields[i])
            {
                draw_sprite(sheildsSpr[i], 0, xx + 240 + 0 + 36 + 72 * i, yy + sy0 + 120);
            }
            
            
        }
        
        draw_set_font(font12Bold);
        draw_set_color(c_white);
        draw_set_halign(fa_left);
        draw_set_valign(fa_top);
        draw_text(xx + 224, yy + sy0 + 192, "Monsters Killed :");        
        draw_text(xx + 224, yy + sy0 + 192 + 36, "Keys Get :");
        draw_text(xx + 224, yy + sy0 + 192 + 36 * 2, "Keys Used :");
        
        draw_text(xx + 224 + 270, yy + sy0 + 192, "Story");
        draw_text(xx + 224 + 270, yy + sy0 + 192 + 36, "Achievements :");
        draw_text(xx + 224 + 270, yy + sy0 + 192 + 36 * 2, "Specials :");
        draw_text(xx + 224 + 270, yy + sy0 + 192 + 36 * 3, "Mini Games :");
        draw_text(xx + 224 + 270, yy + sy0 + 192 + 36 * 4, "Challenges :");
        
        draw_set_halign(fa_right);
        draw_text(xx + 224 + 220, yy + sy0 + 192, string(global.TotalKills));        
        draw_text(xx + 224 + 220, yy + sy0 + 192 + 36, string(global.TotalKeysGet));
        draw_text(xx + 224 + 220, yy + sy0 + 192 + 36 * 2, string(global.TotalKeysUsed));
        
        draw_text(xx + 224 + 270 + 280, yy + sy0 + 192, GetPercentage(storyPer));
        draw_text(xx + 224 + 270 + 280, yy + sy0 + 192 + 36, GetPercentage(aPer));
        draw_text(xx + 224 + 270 + 280, yy + sy0 + 192 + 36 * 2, GetPercentage(sPer));
        draw_text(xx + 224 + 270 + 280, yy + sy0 + 192 + 36 * 3, GetPercentage(oPer));
        draw_text(xx + 224 + 270 + 280, yy + sy0 + 192 + 36 * 4, GetPercentage(cPer));
        
                
        for(i = 0; i &lt; 4; i += 1)
        {
            if(global.clearItem[10 + i])
            {
                sprWidth = sprite_get_width(colorKey[i]);
                sprHeight = sprite_get_height(colorKey[i]);
                sprScale = 0.5;
                draw_sprite_part_ext(colorKey[i],0,0,0,sprWidth, 72,xx + 224 + 16 + 64 * i - sprWidth*sprScale/2, yy + sy0 + 192 + 36 * 3 - 4, sprScale, sprScale, c_white, 1);
                //draw_sprite_ext(colorKey[i],0, xx + 350 + (i - 1.5) * 6, yy + sy0 + 60, 0.1, 0.1, -30, c_white, 1);
            }
        }
        
        /*draw_set_alpha(0.5);
        draw_set_color(c_red);
        draw_roundrect(xx + 224 + 270 + 140 - 2, yy + sy0 + 192 + 2, xx + 224 + 270 + 140 + 70 * mPer + 2, yy + sy0 + 192 + 18, false);
        draw_set_color(c_blue);
        draw_roundrect(xx + 224 + 270 + 140 - 2, yy + sy0 + 192 + 36 * 1 + 2, xx + 224 + 270 + 140 + 70 * aPer + 2, yy + sy0 + 192 + 36 * 1 + 18, false);
        draw_set_color(c_purple);
        draw_roundrect(xx + 224 + 270 + 140 - 2, yy + sy0 + 192 + 36 * 2 + 2, xx + 224 + 270 + 140 + 70 * sPer + 2, yy + sy0 + 192 + 36 * 2 + 18, false);
        draw_set_color(c_silver);
        draw_roundrect(xx + 224 + 270 + 140 - 2, yy + sy0 + 192 + 36 * 3 + 2, xx + 224 + 270 + 140 + 70 * oPer + 2, yy + sy0 + 192 + 36 * 3 + 18, false);
        */
        draw_set_alpha(1);
        draw_set_color(c_red);
        draw_rectangle(xx + 224 + 270 + 136, yy + sy0 + 192 + 8, xx + 224 + 270 + 136 + 70 * mPer, yy + sy0 + 192 + 12, false);
        draw_set_color(c_blue);
        draw_rectangle(xx + 224 + 270 + 136, yy + sy0 + 192 + 36 * 1 + 8, xx + 224 + 270 + 136 + 70 * aPer, yy + sy0 + 192 + 36 * 1 + 12, false);
        draw_set_color(c_purple);
        draw_rectangle(xx + 224 + 270 + 136, yy + sy0 + 192 + 36 * 2 + 8, xx + 224 + 270 + 136 + 70 * sPer, yy + sy0 + 192 + 36 * 2 + 12, false);
        draw_set_color(c_yellow);
        draw_rectangle(xx + 224 + 270 + 136, yy + sy0 + 192 + 36 * 3 + 8, xx + 224 + 270 + 136 + 70 * oPer, yy + sy0 + 192 + 36 * 3 + 12, false);
        draw_set_color(c_olive);
        draw_rectangle(xx + 224 + 270 + 136, yy + sy0 + 192 + 36 * 4 + 8, xx + 224 + 270 + 136 + 70 * cPer, yy + sy0 + 192 + 36 * 4 + 12, false);
    }
    else if(index == 1) //monsters
    {
        with(obj_menuObjPrototype)
        {
            instance_destroy();
        }
        /*if(initialized &amp;&amp; surface_exists(surf1))
        {
            draw_set_alpha(1);
            draw_surface_part(surf1,0, surf1_hindex, 600, min(surf1_height - surf1_index, 592), 200, 8);
        }*/
        sx = xx + 200;
        sy = yy + 8;
        pageCount = 6;
        draw_set_halign(fa_left);
        draw_set_valign(fa_top);
        if(mIndex == 0)
        {
            ppAvailable = false;
        }
        else
        {
            ppAvailable = true;
        }
        maxPage = ceil(count / pageCount) - 1;
        if(maxPage &gt; mIndex)
        {
            pnAvailable = true;
        }
        else
        {
            pnAvailable = false;
        }
        sCount = count - pageCount * mIndex;
        if(sCount &gt; pageCount)
        {
            sCount = pageCount;
        }
        if(maxPage &gt; 0)
        {
            if(ppAvailable)
            {
                draw_sprite_ext(spr_previousPage, 0, xx + ppx, yy + pageY,1,1,0,c_white,0.7);
            }
            else
            {
                draw_sprite_ext(spr_previousPage, 1, xx + ppx,yy + pageY,1,1,0,c_white,0.7);
            }
        
            if(pnAvailable)
            {
                draw_sprite_ext(spr_nextPage, 0, xx + pnx,yy + pageY,1,1,0,c_white,0.7);
            }
            else
            {
                draw_sprite_ext(spr_nextPage, 1, xx + pnx,yy + pageY,1,1,0,c_white,0.7);
            }
        }
        for(var i = pageCount * mIndex; i &lt; (pageCount * mIndex + sCount); i+=1)
        {
            beginX = 0 + sx;
            beginY = 90 * (i - pageCount * mIndex) + sy;
            statusGap = 448;
            draw_set_alpha(1);
            draw_set_color(c_white);
            draw_set_font(font_monsterinfo);
            draw_rectangle(beginX,beginY,592 + sx,beginY + 72, true);
            draw_text(beginX + 16, beginY + 6, name[i]);
            if(isBoss[i])
            {
                draw_sprite_stretched_ext(spr[i], img_index, beginX + 24, beginY + 20, 32, 32, c_white, 1);
            }
            else
            {
                draw_sprite(spr[i], img_index, beginX + 32, beginY + 20);
            }
            draw_text(beginX + statusGap, beginY + 6, "Status :")
           
            draw_set_font(font12);
            draw_text(beginX + 88, beginY + 20, "Attack :");
            draw_text(beginX + 168, beginY + 20, atk[i]);
            draw_text(beginX + 216, beginY + 20, "Defense :");
            draw_text(beginX + 296, beginY + 20, def[i]);
            draw_text(beginX + 344, beginY + 20, "Exp :");
            draw_text(beginX + 394, beginY + 20, ex[i]);
            if(global.special[2])
            {
                draw_set_font(fontBasicInfoMini);    
                if(ex[i] &lt; 100)
                {
                    draw_text(beginX + 394 + 18, beginY + 10, "+" + string(floor(ex[i] * 0.5)))
                }
                else
                {
                    draw_text(beginX + 394 + 26, beginY + 10, "+" + string(floor(ex[i] * 0.5)))
                }
            }
            draw_set_color(c_white);
            draw_set_font(font_monsterinfo);
            draw_text(beginX + 88, beginY + 44, "HP :");
            if(hp[i] &lt; 233)
            {
                for(var l = 0; l &lt; floor(hp[i] / 100); l+=1)
                {
                    draw_sprite_ext(spr_hp,0,beginX + 128 + 24 * l, beginY + 38, .75, .75,0,c_white,1);
                }
                
                for(var k = 0; k &lt; floor((hp[i] mod 100) / 10); k+=1)
                {
                    draw_sprite_ext(spr_heart10,0,beginX + 128 + floor(hp[i] / 100) * 24 + 20 * k, beginY + 48, 1, 1,0,c_white,1);
                }
                for(var j = 0; j &lt; (hp[i] mod 10); j+=1)
                {
                    draw_sprite_ext(spr_smallHeart,0,beginX + 128 + floor(hp[i] / 100) * 24 + 20 * floor((hp[i] mod 100) / 10) + 14 * j, beginY + 52, 1, 1,0,c_white,1);
                }
            }
            else
            {
                draw_sprite_ext(spr_smallHeart,0,beginX + 128, beginY + 52, 1, 1,0,c_white,1);
                draw_text(beginX + 128 + 14, beginY + 40, 'x ' + string(hp[i]));
            }
            draw_set_color(make_color_rgb(0,56,0));
            if(status[i] == 0)
            {
                draw_set_alpha(1);
                draw_text(beginX + statusGap + 8, beginY + 44, "Safe!")
            }
            else
            {
                draw_set_alpha(.25);
            }   
            draw_circle(beginX + statusGap + 16, beginY + 32, 8, false);
        
            draw_set_color(c_yellow);
            if(status[i] == 1)
            {
                draw_set_alpha(1);
                draw_text(beginX + statusGap + 8, beginY + 44, "Battle!")
            }
            else
            {
                draw_set_alpha(.25);
            }   
            draw_circle(beginX + statusGap + 48, beginY + 32, 8, false);
        
            draw_set_color(c_red);
            if(status[i] == 2)
            {
                draw_set_alpha(1);
                draw_text(beginX + statusGap + 8, beginY + 44, "Invincible!")
            }
            else
            {
                draw_set_alpha(.25);
            }   
            draw_circle(beginX + statusGap + 80, beginY + 32, 8, false);
            
        }
    }
    else if(index == 2) //items
    {
        with(obj_menuObjPrototype)
        {
            instance_destroy();
        }
        spDes = "";
        draw_roundrect(xx + 200, yy + 32, xx + 792, yy + 232, true);
        draw_roundrect(xx + 200, yy + 240 + 32, xx + 792, yy + 240 + 130 + 48, true);
        //draw_roundrect(200, 240 + 32, 792, 240 + 150, true);
        draw_set_halign(fa_left);
        draw_set_valign(fa_bottom);
        draw_text(xx + 208,yy + 30, "Consumables");
        draw_text(xx + 208,yy + 240 + 30, "Specials");
        draw_text(xx + 208,yy + 432 + 32,"Description:");
        draw_set_valign(fa_top);
        draw_set_font(font_leftmenu)
        px0 = xx + 232;
        py0 = yy + 48;
        iCount1 = 0;
        if(global.yellowKeyNum &gt; 0)
        {
            draw_sprite(spr_yellowKey, 0, px0 + 200 * (iCount1 mod 3), py0 + 64 * floor(iCount1 / 3));
            draw_text(px0 + 200 * (iCount1 mod 3) + 40, py0 + 64 * floor(iCount1 / 3) + 4, "X " + string(global.yellowKeyNum));
            iCount1 += 1;
        }
        
        if(global.blueKeyNum &gt; 0)
        {
            draw_sprite(spr_blueKey, 0, px0 + 200 * (iCount1 mod 3), py0 + 64 * floor(iCount1 / 3));
            draw_text(px0 + 200 * (iCount1 mod 3) + 40, py0 + 64 * floor(iCount1 / 3) + 4, "X " + string(global.blueKeyNum));
            iCount1 += 1;
        }
        
        if(global.redKeyNum &gt; 0)
        {
            draw_sprite(spr_redKey, 0, px0 + 200 * (iCount1 mod 3), py0 + 64 * floor(iCount1 / 3));
            draw_text(px0 + 200 * (iCount1 mod 3) + 40, py0 + 64 * floor(iCount1 / 3) + 4, "X " + string(global.redKeyNum));
            iCount1 += 1;
        }
        
        if(global.greenKeyNum &gt; 0)
        {
            draw_sprite(spr_greenKey, 0, px0 + 200 * (iCount1 mod 3), py0 + 64 * floor(iCount1 / 3));
            draw_text(px0 + 200 * (iCount1 mod 3) + 40, py0 + 64 * floor(iCount1 / 3) + 4, "X " + string(global.greenKeyNum));
            iCount1 += 1;
        }
        
        if(global.ironKeyNum &gt; 0)
        {
            draw_sprite(spr_ironKey, 0, px0 + 200 * (iCount1 mod 3), py0 + 64 * floor(iCount1 / 3));
            draw_text(px0 + 200 * (iCount1 mod 3) + 40, py0 + 64 * floor(iCount1 / 3) + 4, "X " + string(global.ironKeyNum));
            iCount1 += 1;
        }
        
        if(global.centralWingNum &gt; 0)
        {
            draw_sprite(spr_centerWing, 0, px0 + 200 * (iCount1 mod 3), py0 + 64 * floor(iCount1 / 3));
            draw_text(px0 + 200 * (iCount1 mod 3) + 40, py0 + 64 * floor(iCount1 / 3) + 4, "X " + string(global.centralWingNum));
            iCount1 += 1;
        }
        
        if(global.upstairsWingNum &gt; 0)
        {
            draw_sprite(spr_upstairsWing, 0, px0 + 200 * (iCount1 mod 3), py0 + 64 * floor(iCount1 / 3));
            draw_text(px0 + 200 * (iCount1 mod 3) + 40, py0 + 64 * floor(iCount1 / 3) + 4, "X " + string(global.upstairsWingNum));
            iCount1 += 1;
        }
        
        if(global.downstairsWingNum &gt; 0)
        {
            draw_sprite(spr_downstairsWing, 0, px0 + 200 * (iCount1 mod 3), py0 + 64 * floor(iCount1 / 3));
            draw_text(px0 + 200 * (iCount1 mod 3) + 40, py0 + 64 * floor(iCount1 / 3) + 4, "X " + string(global.downstairsWingNum));
            iCount1 += 1;
        }
        
        if(global.dynamiteNum &gt; 0)
        {
            draw_sprite(spr_dynamite, 0, px0 + 200 * (iCount1 mod 3), py0 + 64 * floor(iCount1 / 3));
            draw_text(px0 + 200 * (iCount1 mod 3) + 40, py0 + 64 * floor(iCount1 / 3) + 4, "X " + string(global.dynamiteNum));
            iCount1 += 1;
        }
        
        for(var i = 0; i &lt; maxSpecial; i += 1)
        {
            if(i &gt; 10)
            {
                tempInd = i + 3;
            }
            else
            {
                tempInd = i;
            }
            if(global.special[tempInd])
            {
                draw_sprite_ext(sSpr[tempInd], 0, xx + 240 + 48 * (tempInd mod 14), yy + 304 + floor(tempInd/11) * 48, 1, 1, 0, c_white, 0.8);
            }
            else
            {
                draw_sprite_ext(spr_specialUnknown, 0, xx + 240 + 48 * (tempInd mod 14), yy + 304 + floor(tempInd/11) * 48, 1, 1, 0, c_white, 0.8);
            }
        }
        
        if(specialSelection &lt; 11)
        {
            tempInd = specialSelection;
        }
        else
        {
            tempInd = specialSelection + 3;
        }
        if(global.special[tempInd])
        {
            spDes = description[tempInd];
        }
        else
        {
            spDes = "???";
        }
        
        draw_set_font(font12);
        if(spDes != "")
        {
            draw_text_ext(xx + 208, yy + 444 + 32, spDes, 32, 600 - 16);
        }
        
        draw_set_color(make_color_rgb(255,201,14));
        draw_rectangle(xx + 240 + 48 * (specialSelection mod 11), yy + 304 + floor(specialSelection/11) * 48, xx + 240 + 48 * (specialSelection mod 11) + 32, yy + 304 + 32 + floor(specialSelection/11) * 48, true);
        draw_rectangle(xx + 240 + 48 * (specialSelection mod 11) - 1, yy + 304 - 1 + floor(specialSelection/11) * 48, xx + 240 + 48 * (specialSelection mod 11) + 32 + 1, yy + 304 + 32 + 1 + floor(specialSelection/11) * 48, true);
    }
    else if(index == 3) //controls
    {
        draw_set_color(c_white);
        draw_roundrect(xx + 216, yy + 40, xx + 792, yy + 80 + bLineIndent * 3 - 16, true);
        draw_roundrect(xx + 216, yy + 88 + bLineIndent * 3 + 24, xx + 792, yy + 88 - 16 + bLineIndent * 7 - 24 , true);
    
        draw_set_halign(fa_left);
        draw_set_valign(fa_bottom);
        
        draw_set_font(fontBasicInfo);
        draw_text(xx + 216, yy + 40 - 4, "Common Settings:");
        draw_text(xx + 216, yy + 88 + bLineIndent * 3 + 24 - 4, "Special Settings:");
        
        //draw_text(xx + 216, yy + 96 + bLineIndent * 6 + 12, "Door:");
        //draw_text(496, yy + 96 + bLineIndent * 6 + 12, "Dynamite:");
        
        draw_set_font(fontButton);               
        
        bColX1 = xx + 240;
        bY1 = yy + 80;
        bXGap = 192;
        bYGap = -12;
        bLineIndent = 80;
        
        draw_text(bColX1, bY1 + bYGap, "Pause:");
        draw_text(bColX1 + bXGap, bY1 + bYGap, "Up:");
        draw_text(bColX1 + bXGap * 2, bY1 + bYGap, "Skip:");
        
        draw_text(bColX1, bY1 + bYGap + bLineIndent, "Left:");
        draw_text(bColX1 + bXGap, bY1 + bYGap + bLineIndent, "Down:");
        draw_text(bColX1 + bXGap * 2, bY1 + bYGap + bLineIndent, "Right:");
        
        draw_text(bColX1, bY1 + bYGap + bLineIndent * 2, "Jump:");
        draw_text(bColX1 + bXGap, bY1 + bYGap + bLineIndent * 2, "Shoot:");
        draw_text(bColX1 + bXGap * 2, bY1 + bYGap + bLineIndent * 2, "Restart:");
        
        draw_text(bColX1, bY1 + bYGap + bLineIndent * 4, "Menu:");
        draw_text(bColX1 + bXGap, bY1 + bYGap + bLineIndent * 4, "Transmission:");
        draw_text(bColX1 + bXGap * 2, bY1 + bYGap + bLineIndent * 4, "Central Flying Mark:");
        
        draw_text(bColX1, bY1 + bYGap + bLineIndent * 5, "Upstairs Wing:");
        draw_text(bColX1 + bXGap, bY1 + bYGap + bLineIndent * 5, "Downstairs Wing:");
        draw_text(bColX1 + bXGap * 2, bY1 + bYGap + bLineIndent * 5, "Central Flying Wing:");
    
        draw_text(bColX1, bY1 + bYGap + bLineIndent * 6, "Door:");
        draw_text(bColX1 + bXGap, bY1 + bYGap + bLineIndent * 6, "Dynamite:");
        draw_text(bColX1 + bXGap * 2, bY1 + bYGap + bLineIndent * 6, "Space Mark:");

        
        if(!instance_exists(obj_button))
        {
        button1 = instance_create(bColX1, bY1, obj_button);
        button1.type = "Pause";
        button1.key = global.pausebutton;
        button2 = instance_create(bColX1 + bXGap, bY1, obj_button);
        button2.type = "Up";
        button2.key = global.upbutton;
        button3 = instance_create(bColX1 + bXGap * 2, bY1, obj_button);
        button3.type = "Skip";
        button3.key = global.skipbutton;
        
        button4 = instance_create(bColX1, bY1 + bLineIndent, obj_button);
        button4.type = "Left";
        button4.key = global.leftbutton;
        button5 = instance_create(bColX1 + bXGap, bY1 + bLineIndent, obj_button);
        button5.type = "Down";
        button5.key = global.downbutton;
        button6 = instance_create(bColX1 + bXGap * 2, bY1 + bLineIndent, obj_button);
        button6.type = "Right";
        button6.key = global.rightbutton;
        
        button7 = instance_create(bColX1, bY1 + bLineIndent * 2, obj_button);
        button7.type = "Jump";
        button7.key = global.jumpbutton;
        button8 = instance_create(bColX1 + bXGap, bY1 + bLineIndent * 2, obj_button);
        button8.type = "Shoot";
        button8.key = global.shotbutton;
        button9 = instance_create(bColX1 + bXGap * 2, bY1 + bLineIndent * 2, obj_button);
        button9.type = "Restart";
        button9.key = global.restartbutton;
        
        //button16 = instance_create(bColX1 + bXGap - 152, bY1 + bLineIndent * 6 - 16, obj_button);
        //button16.type = "Door";
        //button16.key = global.doorButton;
        
        //button17 = instance_create(bColX1 + bXGap * 2 - 16, bY1 + bLineIndent * 6 - 16, obj_button);
        //button17.type = "Dynamite";
        //button17.key = global.dynamiteButton;
        bY1 -= 8;
        button10 = instance_create(bColX1, bY1 + bLineIndent * 4, obj_button);
        button10.type = "Menu";
        button10.key = global.menubutton;
        button11 = instance_create(bColX1 + bXGap, bY1 + bLineIndent * 4, obj_button);
        button11.type = "Transmission";
        button11.key = global.transmissionbutton;
        button12 = instance_create(bColX1 + bXGap * 2, bY1 + bLineIndent * 4, obj_button);
        button12.type = "CentralFlyingPos";
        button12.key = global.centralflyingposbutton;
        
        button13 = instance_create(bColX1, bY1 + bLineIndent * 5, obj_button);
        button13.type = "UpStairs";
        button13.key = global.upstairsbutton;
        button14 = instance_create(bColX1 + bXGap, bY1 + bLineIndent * 5, obj_button);
        button14.type = "DownStairs";
        button14.key = global.downstairsbutton;
        button15 = instance_create(bColX1 + bXGap * 2, bY1 + bLineIndent * 5, obj_button);
        button15.type = "CentralFlying";
        button15.key = global.centralflyingbutton;
        
        button16 = instance_create(bColX1, bY1 + bLineIndent * 6, obj_button);
        button16.type = "Door";
        button16.key = global.doorButton;
        button17 = instance_create(bColX1 + bXGap, bY1 + bLineIndent * 6, obj_button);
        button17.type = "Dynamite";
        button17.key = global.dynamiteButton;
        button18 = instance_create(bColX1 + bXGap * 2, bY1 + bLineIndent * 6, obj_button);
        button18.type = "Space";
        button18.key = global.spaceButton;
        }
          
    }
    else if(index == 4) //achievements
    {
        with(obj_menuObjPrototype)
        {
            instance_destroy();
        }
        /*if(initialized1 &amp;&amp; surface_exists(surf2))
        {
            draw_set_alpha(1);
            draw_surface_part(surf2,0, surf2_hindex, 600, min(surf2_height - surf2_index, 576), 224, 24);
        }*/
        sx = xx + 224; 
        sy = yy + 24;
        pageCount = 6;
        if(aIndex == 0)
        {
            ppAvailable = false;
        }
        else
        {
            ppAvailable = true;
        }
        maxPage = ceil(achievementCount / pageCount) - 1;
        if(maxPage &gt; aIndex)
        {
            pnAvailable = true;
        }
        else
        {
            pnAvailable = false;
        }
        sCount = achievementCount - pageCount * aIndex;
        if(sCount &gt; pageCount)
        {
            sCount = pageCount;
        }
        
        if(maxPage &gt; 0)
        {
            if(ppAvailable)
            {
                draw_sprite_ext(spr_previousPage, 0, xx + ppx,yy + pageY,1,1,0,c_white,0.7);
            }
            else
            {
                draw_sprite_ext(spr_previousPage, 1, xx + ppx,yy + pageY,1,1,0,c_white,0.7);
            }
        
            if(pnAvailable)
            {
                draw_sprite_ext(spr_nextPage, 0, xx + pnx,yy + pageY,1,1,0,c_white,0.7);
            }
            else
            {
                draw_sprite_ext(spr_nextPage, 1, xx + pnx,yy + pageY,1,1,0,c_white,0.7);
            }
        }
        draw_set_halign(fa_left);
        draw_set_valign(fa_top);
        for(var i = pageCount * aIndex; i &lt; (pageCount * aIndex + sCount); i+=1)
        {
            aX = 0 + sx;
            aY = 90 * (i - pageCount * aIndex) + sy;
            infoGap = 100;
            draw_set_alpha(1);
            draw_set_color(c_white);
            
            
            if(global.achievements[i])
            {
                if(i &lt; 8)
                {
                    draw_sprite_part_ext(global.achievementSpr[i], 0, 16, 9, 51, 51, aX, aY, 1.333, 1.333, c_white, 1);
                }
                else
                {
                    draw_sprite_part_ext(global.achievementSpr[i], 0, 9, 9, 51, 51, aX, aY, 1.333, 1.333, c_white, 1);
                }
                draw_sprite(spr_achievementContainer,0,aX,aY);
                draw_set_font(font16);
                draw_text(aX + infoGap, aY, global.achievementName[i]);
                draw_set_font(fontBasicInfo);
                draw_text_ext(aX + infoGap, aY + 24, global.achievementDescription[i], 16, 568 - infoGap);
            }
            else
            {
                draw_sprite_part_ext(spr_unknown, 0, 0, 0, 64, 64, aX, aY, 1.0625, 1.0625, c_white, 1);
                draw_set_font(font16);
                draw_text(aX + infoGap, aY, "???");
                draw_set_font(fontBasicInfo);
                if(global.special[5])
                {
                    draw_set_color(c_gray);
                    draw_text_ext(aX + infoGap, aY + 24, global.achievementDescription[i], 16, 568 - infoGap);
                }
                else
                {
                    draw_text(aX + infoGap, aY + 24, "???");
                }
            }
        }
    }
    else if(index == 5)
    {
        with(obj_menuObjPrototype)
        {
            instance_destroy();
        }
        draw_set_font(font24);
        draw_set_halign(fa_left);
        draw_set_valign(fa_top);
        draw_text(xx + 216,yy + 32, "Friendly Hints");
        draw_set_font(font16);
        draw_text_ext(xx + 216,yy + 96, "If you are good at switching backups, you are more likely to find the best way out.", 48, 576);
        draw_sprite_ext(spr_newBackup, 0, xx + 500, yy + 290, 1,1,0,backupColor1, 0.8);
        draw_sprite_ext(spr_loadBackup, 0, xx + 500, yy + 470, 1,1,0,backupColor2, 0.8);
    }
    else if(index == 6)
    {
        with(obj_menuObjPrototype)
        {
            instance_destroy();
        }
        draw_set_halign(fa_left);
        draw_set_valign(fa_top);
        draw_set_color(c_yellow);
        draw_set_font(font24);
        draw_text(xx + 208, yy + 32, "Warning:");
        draw_set_font(font16);
        draw_text_ext(xx + 208, yy + 72, "You can get additional keys in this tab. However, once you saved the additional keys get from this tab, you will be identified as a 'CHEATER', and you will not be able to see the true end.", 24, 576);
        
        
        draw_set_halign(fa_center);
        draw_set_valign(fa_middle);
        draw_set_color(c_black);
        if(cheatSelection == 1)
        {
            draw_sprite_ext(sprButton, 1, xx + 250, yy + 200, 2.5 * 4 / 3, 1 * 4 / 3, 0, c_white, 1);
        }
        else
        {
            draw_sprite_ext(sprButton, 0, xx + 250, yy + 200, 2.5* 4 / 3, 1 * 4 / 3, 0, c_white, 1);
        }
        draw_text(xx + 500, yy + 200 + 25, "I wanna 1 additional Yellow Key");
        if(cheatSelection == 2)
        {
            draw_sprite_ext(sprButton, 1, xx + 250, yy + 200 + 60 * 1, 2.5* 4 / 3, 1 * 4 / 3, 0, c_white, 1);
        }
        else
        {
            draw_sprite_ext(sprButton, 0, xx + 250, yy + 200 + 60 * 1, 2.5* 4 / 3, 1 * 4 / 3, 0, c_white, 1);
        }
        draw_text(xx + 500, yy + 200 + 60 * 1 + 25, "I wanna 1 additional Blue Key");
        if(cheatSelection == 3)
        {
            draw_sprite_ext(sprButton, 1, xx + 250, yy + 200 + 60 * 2, 2.5* 4 / 3, 1 * 4 / 3, 0, c_white, 1);
        }
        else
        {
            draw_sprite_ext(sprButton, 0, xx + 250, yy + 200 + 60 * 2, 2.5* 4 / 3, 1 * 4 / 3, 0, c_white, 1);
        }
        draw_text(xx + 500, yy + 200 + 60 * 2 + 25, "I wanna 1 additional Red Key");
        if(cheatSelection == 4)
        {
            draw_sprite_ext(sprButton, 1, xx + 250, yy + 200 + 60 * 3, 2.5* 4 / 3, 1 * 4 / 3, 0, c_white, 1);
        }
        else
        {
            draw_sprite_ext(sprButton, 0, xx + 250, yy + 200 + 60 * 3, 2.5* 4 / 3, 1 * 4 / 3, 0, c_white, 1);
        }        
        draw_text(xx + 500, yy + 200 + 60 * 3 + 25, "I wanna 1 additional Green Key");
        if(cheatSelection == 5)
        {
            draw_sprite_ext(sprButton, 1, xx + 250, yy + 200 + 60 * 4, 2.5* 4 / 3, 1 * 4 / 3, 0, c_white, 1);
        }
        else
        {
            draw_sprite_ext(sprButton, 0, xx + 250, yy + 200 + 60 * 4, 2.5* 4 / 3, 1 * 4 / 3, 0, c_white, 1);
        }
        draw_text(xx + 500, yy + 200 + 60 * 4 + 25, "I wanna 1 additional Iron Key");
        
        draw_set_halign(fa_left);
        draw_set_valign(fa_top);
        draw_set_alpha(1);
        if(!global.isPreviousCheated &amp;&amp; !global.isCheated)
        {
            draw_set_color(make_color_rgb(0,56,0));
            draw_text(xx + 300, yy + 520, "You haven't cheated, you are a good kid.");
        }
        if(!global.isPreviousCheated &amp;&amp; global.isCheated)
        {
            draw_set_color(c_yellow);
            draw_text_ext(xx + 300, yy + 520, "You attempted to cheat but yet not saved. You can go back.", 30, 484);
        }
        if(global.isPreviousCheated &amp;&amp; global.isCheated)
        {
            draw_set_color(c_red);
            draw_text(xx + 300, yy + 520, "You DIRTY CHEATER!!!!");
        }
        draw_text(xx + 216, yy + 520, "Status : ");
    }
    else
    {
        with(obj_menuObjPrototype)
        {
            instance_destroy();
        }
    }
    if(isRefresh)
    {
        //screen_refresh();
        isRefresh = false;
    }
}
else if(instance_exists(obj_menuObjPrototype))
{
    with(obj_menuObjPrototype)
    {
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!deactivated &amp;&amp; drawTeleportTarget)
{
            if(room == rSecret1 || room == rSecret3)
            {
                teleportX = 800 - player.x;
                teleportY = 608 - player.y;
            }
            else if(room == rSecret2)
            {
                teleportX = 800 - player.x;
                teleportY = 32 + 576 - (player.y - 32);
            }
            else
            {
                teleportX = 192 + 608 - (player.x - 192);
                teleportY = 608 - player.y;
            }
            teleportY += (23 - (32 - 23)) - (32 - 23);
            draw_sprite_ext(player.sprite_index,player.sprite_index,teleportX,teleportY,-player.image_xscale,1,0,c_black,0.5);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Reset drawing
draw_reset();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
