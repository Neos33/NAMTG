<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.dashSpd = spd;
global.buildMode = true;
view_xview[0] = 0;
view_yview[0] = 0;
SS_StopAll();
with(player)
{
 instance_destroy();
}
list = global.GDList;
size = ds_list_size(list);
bgOffset = 0;
loadGDDesign(global.gdFile);
global.currentBGM = bgm;
audio_playmusic_volume(bgm);
if(instance_number(obj_GD_Ground) == 0)
{
    t = 0;
    while(t &lt; room_width)
    {
     instance_create(t, view_yview[0] + 512, obj_GD_Ground);
     t += 256;
    }
}
instance_create(x,y,obj_imageBlendController);
instance_create(view_xview[0] + 32, 0, obj_GDObjEffectOut);
instance_create(view_xview[0] + view_wview[0], 0, obj_GDObjEffectIn);
alarm[0] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!soundPaused)
{
    currentPos += 1;
    view_xview[0] += global.dashSpd;
    alarm[0] = 1;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(FMODInstanceIsPlaying(bgm))
{
    with(player)
    {
        hspeed = global.dashSpd;
        sprite_index = sprPlayerRunning;
        gravity = 0.5;
    }
    
    with(obj_GD_Plane)
    {
        hspeed = global.dashSpd;
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(FMODInstanceIsPlaying(bgm))
{
    with(player)
    {
        hspeed = global.dashSpd;
        sprite_index = sprPlayerRunning;
        gravity = 0.5;
    }
    
    with(obj_GD_Plane)
    {
        hspeed = global.dashSpd;
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if(FMODInstanceIsPlaying(bgm))
{
    with(player)
    {
        hspeed = global.dashSpd;
        sprite_index = sprPlayerRunning;
        gravity = 0.5;
    }
    with(obj_GD_Plane)
    {
        hspeed = global.dashSpd;
    }
    bgOffset += 0.2;
    if(bgOffset &gt;= 800)
    {
     bgOffset = 0;
    }
}
if(checkMouse(view_xview[0] + 100 , 32, view_xview[0] + 700, 48))
{
    checked = true;
    if(mouse_check_button(mb_left))
    {
        mouseDown = true;
    }
    if(mouse_check_button_released(mb_left))
    {
        mouseDown = false;
        currentPos = floor((mouse_x - view_xview[0] - 100) / 600 * size);
        if(!soundPaused &amp;&amp; !FMODInstanceIsPlaying(bgm))
        {
            audio_resumemusic_volume(bgm);
        }
        view_xview[0] = room_width - global.dashSpd * (size - currentPos) - 96;
        if(instance_exists(player))
        {
            player.x = room_width - global.dashSpd * (size - currentPos) + 32;
            player.y = 304;
        }
        else
        {
            with(GAMEOVER)
            {
                instance_destroy();
            }
            with(obj_GD_Plane)
            {
                instance_destroy();
            }
            instance_create(room_width - global.dashSpd * (size - currentPos) + 32,304,player)
        }
        if(!FMODInstanceIsPlaying(bgm))
        {
            audio_resumemusic_volume(bgm);
            FMODInstanceSetPosition(bgm, ds_list_find_value(list, currentPos));
            FMODInstanceSetPaused(bgm, true);
        }
        else
        {
            FMODInstanceSetPosition(bgm, ds_list_find_value(list, currentPos));
        }
        with(all)
        {
            in = x &lt; (obj_GDObjEffectIn.x - 5);
            out = x &lt; (obj_GDObjEffectOut.x - 5);
        }
    }
}
else
{
    mouseDown = false;
    checked = false;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_background_stretched_ext(bgGeometryDash,view_xview[0] - bgOffset,view_yview[0],800,608, global.img_blend, 0.9);
draw_background_stretched_ext(bgGeometryDash,view_xview[0] + view_wview[0] - bgOffset,view_yview[0],800,608, global.img_blend, 0.9);
draw_set_color(c_white);
draw_rectangle(view_xview[0] + 100 - 1, 32 - 1, view_xview[0] + 700 + 1, 48 + 1, true);
draw_set_color(c_red);
if(mouseDown)
{
    draw_rectangle(view_xview[0] + 100 , 32, mouse_x, 48, false);
}
else
{
    draw_rectangle(view_xview[0] + 100 , 32, view_xview[0] + 100 + currentPos / size * 600, 48, false);
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
