<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>cubeWidth = 12;
maxNum = 5;
alarm[0] = 1;
alarm[1] = 1;
alarm[2] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
r1 = random_range(64,128);
rngAngle1 = random_range(0,359);
dx = 400 + r1 * cos(degtorad(rngAngle1));
dy = 304 - r1 * sin(degtorad(rngAngle1));
m = instance_create(dx,dy,obj_geSnowStar);
m.direction = rngAngle1;
alarm[2] = 18;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
r = random_range(64,128);
rngAngle += 23;
sx = 400 + r * cos(degtorad(rngAngle));
sy = 304 - r * sin(degtorad(rngAngle));
m = instance_create(sx,sy,obj_geMeteor);
m.direction = rngAngle;
m.image_angle = rngAngle;
alarm[1] = 6;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*e11 = instance_create(random_range(50,350),100,obj_geEnergy);
e11.direction = 0;
e12 = instance_create(random_range(450,750),100,obj_geEnergy);
e12.direction = 180;
e21 = instance_create(random_range(50,350),520,obj_geEnergy);
e21.direction = 0;
e22 = instance_create(random_range(450,750),520,obj_geEnergy);
e22.direction = 180;
alarm[0] = 20;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_color(make_color_rgb(0,255,255));
draw_set_alpha(0.5);
//draw_set_blend_mode(bm_add);
//offset = 0;
repeat(2)
{
    //scale = (12+offset)/12;
    num = irandom_range(-2,maxNum);
    for(i = 0; i &lt; room_width; i+=cubeWidth)
    {
        tempNum = RangeClamp(num + irandom_range(-1,1),0,maxNum - irandom_range(0,4));
        num = tempNum;
        for(j = RangeClamp(-num,-num,0); j &lt; RangeClamp(num,0,num); j += 1)
        {
            //draw_rectangle(i + 1, 76 + j * cubeWidth + 1, i + 7, 76 + j * cubeWidth + 7, false);
            draw_sprite(spr_startCube,0,i,76+j*cubeWidth);
            //draw_sprite_ext(spr_startCube,0,i - offset,76+j*cubeWidth - offset,scale,scale,0,c_white,1);
        }
    }
    num = irandom_range(0,maxNum);
    for(i = 0; i &lt; room_width; i+=cubeWidth)
    {
        tempNum = RangeClamp(num + irandom_range(-1,1),0,maxNum - irandom_range(0,4));
        num = tempNum;
        for(j = RangeClamp(-num,-num,0); j &lt; RangeClamp(num,0,num); j += 1)
        {
            //draw_rectangle(i + 1, 540 + j * cubeWidth + 1, i + 7, 540 + j * cubeWidth + 7, false);
            draw_sprite(spr_startCube,0,i,540+j*cubeWidth);
            //draw_sprite_ext(spr_startCube,0,i - offset,540+j*cubeWidth - offset,scale,scale,0,c_white,1);
        }
    }
    //offset += 4;
}


draw_reset_color();
//draw_set_blend_mode(bm_normal);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
